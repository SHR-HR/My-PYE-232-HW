# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Дата: 17-18 ноября 2023

# Курс: Разработка Web-приложений на Python, с применением Фреймворка Django
# Дисциплина: Основы программирования на Python

# Практическая работа №5.- УПРАВЛЯЮЩИЕ ВЫРАЖЕНИЯ. БЛОКИ, УСЛОВИЯ, ЦИКЛЫ

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №1.

# Дано: ↓

# Используя цикл while, выведите на экран для числа 2 его степени от 0 до 20.
# Возведение в степень в Python обозначается как **.

# Output
# ...
# 32
# 64
# 128
# 256
# 512
# 1024
# ...

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
# В этом примере основание степени (base) остается неизменным внутри цикла, и степени числа 2 просто выводятся.
# Инициализация переменных
base = 2
exponent = 0
# Вывод степеней числа 2 от 0 до 20
while exponent <= 20:
    result = base ** exponent
    print(result)
    exponent += 1

# Шаг №1. - Закрепление или инициализация переменных
base = 2
exponent = 0
# Мы начинаем с инициализации переменных base и exponent.
# base устанавливаем в 2, так как мы хотим выводить степени числа 2.
# exponent инициализируем в 0, так как мы начнем с степени 0.

# Шаг №2. - Вывод степеней числа 2 от 0 до 20 с использованием цикла while - по условию задачи
while exponent <= 20:
    result = base ** exponent
    print(result)
    exponent += 1
# Мы используем цикл while, который будет выполняться, пока exponent не превысит 20.
# Внутри цикла мы вычисляем result, которое представляет собой число 2 в степени exponent.
# Затем мы выводим result на экран.
# После этого увеличиваем значение exponent на 1, чтобы перейти к следующей степени - если я все правильно сделал.

# Шаг 3: Завершение выполнения программы
# Получается когда exponent достигнет 21 (после 20-й степени),
# условие цикла while не будет выполнено, и выполнение программы завершится.
# Пример:
# - 1
# - 2
# - 4
# - 8
# - 16
# - 32
# - 64
# - 128
# - 256
# - 512
# - 1024
# - 2048
# - 4096
# - 8192
# - 16384
# - 32768
# - 65536
# - 131072
# - 262144
# - 524288
# - 1048576
# Таким образом, программа выводит степени числа 2, начиная с 2^0 и заканчивая 2^20.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓ - Суть та же самая, только записано чуть чуть по другому.
# Если я правильно понял то в этом примере, помимо вывода степеней числа 2, также происходит изменение переменной
# base внутри цикла (base *= 2).
# Это приводит к тому, что основание степени также увеличивается в два раза на каждой итерации.
# Инициализация переменных
base = 2
exponent = 0
# Вывод степеней числа 2 от 0 до 20
while exponent <= 20:
    print(base ** exponent)
    exponent += 1
    base *= 2

# Шаг №1. - Закрепление или инициализация переменных
base = 2
exponent = 0
# Мы начинаем с инициализации переменных base и exponent. base устанавливаем в 2, так как мы хотим
# выводить степени числа 2. exponent инициализируем в 0, так как мы начнем с степени 0.

# Шаг №2. - Вывод степеней числа 2 от 0 до 20 с использованием цикла while
while exponent <= 20:
    print(base ** exponent)
    exponent += 1
    base *= 2
# Мы используем цикл while, который будет выполняться, пока exponent не превысит 20.
# Внутри цикла мы выводим base в степени exponent.
# Увеличиваем значение exponent на 1.
# Умножаем base на 2. Это удваивает значение base на каждой итерации, что соответствует увеличению степени на 1.
# Пример:
# - 1
# - 2
# - 4
# - 8
# - 16
# - 32
# - 64
# - 128
# - 256
# - 512
# - 1024
# - 2048
# - 4096
# - 8192
# - 16384
# - 32768
# - 65536
# - 131072
# - 262144
# - 524288
# - 1048576
# Получается, программа выводит степени числа 2, начиная с 2^0 и удваивая base на каждой итерации,
# что приводит к 2^1, 2^2, и так далее, до 2^20.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓ - а если использовать тернарный оператор
# Инициализация переменных
base = 2
exponent = 0
# Вывод степеней числа 2 от 0 до 20 с использованием тернарного оператора
while exponent <= 20:
    print(base ** exponent) if exponent <= 20 else None
    exponent += 1
    base *= 2

# Шаг №1. - как обычно, инициализация переменных
base = 2
exponent = 0
# Мы начинаем с инициализации переменных base и exponent.
# base устанавливаем в 2, так как мы хотим выводить степени числа 2.
# exponent инициализируем в 0, так как мы начнем с степени 0.

# Шаг №2. - И тут у нас вывод степеней числа 2 от 0 до 20 с использованием тернарного оператора
while exponent <= 20:
    print(base ** exponent) if exponent <= 20 else None
    exponent += 1
    base *= 2
# Мы используем цикл while, который будет выполняться, пока exponent не превысит 20. Внутри цикла мы используем
# тернарный оператор для проверки условия exponent <= 20.
# Если условие выполняется, то выводится base ** exponent, иначе выводится None. После этого увеличиваем значение
# exponent на 1 и умножаем base на 2. Это удваивает значение base на каждой итерации,
# что соответствует увеличению степени на 1.
# Пример вывода программы:
# - 1
# - 2
# - 4
# - 8
# - 16
# - 32
# - 64
# - 128
# - 256
# - 512
# - 1024
# - 2048
# - 4096
# - 8192
# - 16384
# - 32768
# - 65536
# - 131072
# - 262144
# - 524288
# - 1048576

# Таким образом, программа выводит степени числа 2, начиная с 2^0 и удваивая base на каждой итерации,
# что приводит к 2^1, 2^2 и так далее, до 2^20. Тернарный оператор используется для опционального вывода, хотя в данном
# случае он не делает код более читаемым.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №2.

# Дано: ↓

# Сколько всего знаков * будет выведено после исполнения фрагмента программы:

# i = 0
# while i < 5:
    # print('*')
    # if i % 2 == 0:
        # print('**')
    # if i > 2:
        # print('***')
    # i = i + 1

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
i = 0
while i < 5:
    print('*')
    if i % 2 == 0:
        print('**')
    if i > 2:
        print('***')
    i = i + 1
# Мой ответ 17
# Было и 7
# Было и 5
# Было и 12

# 0 < 5 (да)
#     *
# 0 % 2 = 0 (да)
#     **
# 0 > 5 (нет)
#     вернулись в начало
# 1 < 5 (да)
#     *
# 1 % 2 = 1 (нет)
#     вернулись в начало
# 2 < 5 (да)
#     *
# 2 % 2 = 0 (да)
#     **
# 2 > 2 (нет)
#     вернулись в начало
# 3 < 5 (да)
#     *
# 3 % 2 = 1 (нет)
#
# 3 > 2 (да)
#     ***
#     вернулись в начало
# 4 < 5 (да)
#     *
# 4 % 2 = 0 (да)
#     **
# 4 > 2 (да)
#     ***
#     вернулись в начало
#     цикл закончен

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓ - Можно вставить в код такую конструкцию и посчитать звездочки автоматически
sum = 0  # сумма звездочек
i = 0
while i < 5:
    print('*')
    sum += 1
    if i % 2 == 0:
        print('**')
        sum += 2
    if i > 2:
        print('***')
        sum += 3
    i = i + 1

print(sum)

# Первая итерация (i = 0):
# print('*'): 1 звездочка.
# Условие if i % 2 == 0: выполняется (0 делится на 2 без остатка). print('**'): 2 звездочки.
# Условие if i > 2: не выполняется.
# Всего: 3 звездочки.

# Вторая итерация (i = 1):
# print('*'): 1 звездочка.
# Условие if i % 2 == 0: не выполняется (1 не делится на 2 без остатка).
# Условие if i > 2: не выполняется.
# Всего: 4 звездочки.

# Третья итерация (i = 2):
# print('*'): 1 звездочка.
# Условие if i % 2 == 0: выполняется (2 делится на 2 без остатка). print('**'): 2 звездочки.
# Условие if i > 2: не выполняется.
# Всего: 7 звездочек.

# Четвёртая итерация (i = 3):
# print('*'): 1 звездочка.
# Условие if i % 2 == 0: не выполняется (3 не делится на 2 без остатка).
# Условие if i > 2: выполняется. print('***'): 3 звездочки.
# Всего: 11 звездочек.

# Пятая итерация (i = 4):
# print('*'): 1 звездочка.
# Условие if i % 2 == 0: выполняется (4 делится на 2 без остатка). print('**'): 2 звездочки.
# Условие if i > 2: выполняется. print('***'): 3 звездочки.
# Всего: 17 звездочек.

# Таким образом, с учетом каждой итерации и всех условий, общее количество звездочек равно 17.

# Шикарные задания! Сидишь и споришь сам с собой!=D

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓ - Добавление своего счётчика ни кто не отменял
i = 0
stars = 0
while i < 5:
    print('*')
    stars += 1
    if i % 2 == 0:
        print('**')
        stars += 2
    if i > 2:
        print('***')
        stars += 3
    i = i + 1
print(f"количество звёздочек - {stars}")

# Первая итерация:
# '*': 1 звездочка.
# '**': 2 звездочки.
# Общее: 3 звездочки.

# Вторая итерация:
# '*': 1 звездочка.
# Условие if i % 2 == 0: не выполняется.
# Условие if i > 2: не выполняется.
# Общее: 4 звездочки.

# Третья итерация:
# '*': 1 звездочка.
# '**': 2 звездочки.
# Общее: 7 звездочек.

# Четвёртая итерация:
# '*': 1 звездочка.
# Условие if i % 2 == 0: не выполняется.
# '***': 3 звездочки.
# Общее: 11 звездочек.

# Пятая итерация:
# '*': 1 звездочка.
# '**': 2 звездочки.
# '***': 3 звездочки.
# Общее: 17 звездочек.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №3.

# Дано: ↓

# Напишите программу, которая считывает со стандартного ввода целые числа,
# по одному числу в строке, и после первого введенного нуля выводит сумму полученных на вход чисел.

# Sample Input 1:                                                       Sample Output 1:
# 5                                                                     14
# -3
# 8
# 4
# 0

# Sample Input 2:                                                       Sample Output 2:
# 0                                                                     0

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
total = 0
while True:
    num = int(input('Число: '))
    if num != 0:
        total += num
    else:
        break
print(total)
# Используем цикл 'while True' для бесконечного ввода чисел, затем проверяет введенное число:
# если оно не равно 0, оно добавляется к общей сумме 'total'.
# Если введен 0, программа выходит из цикла с помощью 'break', и затем выводится общая сумма.

# Шаг №1. - Инициализация переменной total
# total инициализируется значением 0. Эта переменная будет использоваться для накопления суммы введенных чисел.
total = 0

# Шаг №2. - Бесконечный цикл while True
# Создается бесконечный цикл для ввода чисел. Программа будет выполняться в цикле до тех пор,
# пока не будет выполнено условие для выхода (break).
while True:

# Шаг №3. - Ввод числа
# num считывается с помощью input и преобразуется в целое число с помощью int().
num = int(input('Число: '))

# Шаг №4. - Проверка на ввод нуля
# Если введенное число num не равно 0, оно добавляется к текущей сумме total.
# Если введен 0, программа выходит из цикла с помощью оператора break.
if num != 0:
    total += num
else:
    break

# Шаг №5. - Вывод суммы
# После завершения ввода (при вводе 0), программа выводит общую сумму введенных чисел.
print(total)

# Таким образом, ваш код работает следующим образом: программа в бесконечном цикле запрашивает ввод чисел,
# добавляет их к сумме, и прерывает цикл при вводе числа 0. Затем программа выводит общую сумму введенных чисел.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓
s = 0  # Инициализируем переменную s нулем. Она будет использоваться для хранения суммы введенных чисел.
b = True  # Инициализируем переменную b значением True. Она будет использоваться для управления циклом while.

while b:  # Начинаем бесконечный цикл while. Цикл будет выполняться, пока b равно True.
    a = int(input("Введите число: "))  # Запрашиваем у пользователя ввод числа и преобразуем введенную строку в целое число.

    if a != 0:  # Проверяем, не равно ли введенное число 0.
        s += a  # Если число не равно 0, добавляем его к сумме.
    else:
        print(s)  # Если число равно 0, выводим текущую сумму.
        b = False  # Присваиваем b значение False, чтобы выйти из цикла while.

# Код запрашивает у пользователя ввод числа. Если введенное число не равно 0, оно добавляется к сумме s.
# Если введенное число равно 0, программа выводит текущую сумму и завершает цикл, устанавливая b в значение False.

# Важно отметить, что в этом коде предполагается, что пользователь будет вводить только целые числа.
# Если пользователь вводит нечисловое значение, например, строку, программа может вызвать исключение (ошибку).
# Если это представляет проблему, вы можете добавить обработку исключений для более надежного ввода данных.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓ - Практически 1 в 1 как вариант выше, но записан он по другому
# Инициализация переменных
sum_of_numbers = 0  # sum_of_numbers инициализируется нулем, это переменная для хранения суммы.
# Считывание чисел с клавиатуры
while True: # цикл while True выполняется бесконечно.
    number = int(input("Введите число: "))
    # Проверка на ввод нуля
    if number == 0: # внутри цикла также запрашивается ввод числа от пользователя (number).
        break  # Выход из цикла, если введен 0
    # Добавление числа к сумме
    sum_of_numbers += number
# Вывод суммы
print(sum_of_numbers)

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ Цикл For ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #

# Цикл for в языке программирования Python используется для перебора элементов в последовательности
# (например, списке, кортеже, строке и т.д.). Он обеспечивает удобный способ выполнения определенных действий для
# каждого элемента в последовательности. Синтаксис цикла for выглядит следующим образом:

for переменная in последовательность:
    # блок кода, который будет выполнен для каждого элемента
    # переменная принимает значение текущего элемента на каждой итерации

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №1.

# Дано: ↓

# По данному натуральном n вычислите сумму 1!+2!+3!+...+n!1!+2!+3!+...+n!.
# В решении этой задачи можно использовать только один цикл.
# Пользоваться математической библиотекой math в этой задаче запрещено.



# Решение:
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1.а ↓
#1. Нужно показать все числа в указанном диапазоне.
# Ввод двух чисел от пользователя

start_number = int(input("Введите начальное число: "))
end_number = int(input("Введите конечное число: "))

# Проверка, чтобы убедиться, что начальное число меньше или равно конечному
if start_number > end_number:
    print("Ошибка: Начальное число должно быть меньше или равно конечному.")
else:
    # Вывод всех чисел в указанном диапазоне
    print(f"Числа в диапазоне от {start_number} до {end_number}:")
    for number in range(start_number, end_number + 1):
        print(number)

            # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
            # Вариант №1.б ↓
            start_number, end_number = map(int, input("Введите начальное и конечное число через пробел: ").split())

            if start_number > end_number:
                print("Ошибка: Начальное число должно быть меньше или равно конечному.")
            else:
                print(f"Числа в диапазоне от {start_number} до {end_number}:")
                print(*range(start_number, end_number + 1), sep='\n')

# В данном варианте за № 1.1 - Использована функция map для преобразования строк введенных пользователем
# в целые числа, а также метод split для разделения введенной строки на два числа.
# Затем используется распаковка для присваивания значений переменным start_number и end_number
# одной строкой. Также использован параметр sep='\n' в функции print,
# чтобы вывод был отформатирован как колонка чисел.

            # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
            # Вариант №1.в ↓ - если можно, то давайте используем такой код ( в одну строчку)
            start, end = map(int, input("Введите начальное и конечное число через пробел: ").split());
                print(f"Числа в диапазоне от {start} до {end}:\n{list(range(start, end + 1))}") if start <= end else (
                    print("Ошибка: Начальное число должно быть меньше или равно конечному."))
# Этот код читает два числа, проверяет условие и выводит либо числа в диапазоне, либо сообщение об ошибке,
# все в одной строке.
# если не сработает то он (код из варианта №1.3) - должен выглядеть так:
start, end = map(int, input("Введите начальное и конечное число через пробел: ").split()); print(f"Числа в диапазоне от {start} до {end}:\n{list(range(start, end + 1))}") if start <= end else print("Ошибка: Начальное число должно быть меньше или равно конечному.")

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2.а ↓
#2. Нужно показать все нечетные числа в указанном диапазоне.
# Ввод двух чисел от пользователя
start_number = int(input("Введите начальное число: "))
end_number = int(input("Введите конечное число: "))
# Проверка, чтобы убедиться, что начальное число меньше или равно конечному
if start_number > end_number:
    print("Ошибка: Начальное число должно быть меньше или равно конечному.")
else:
    # Вывод всех нечетных чисел в указанном диапазоне
    print(f"Нечетные числа в диапазоне от {start_number} до {end_number}:")
    for number in range(start_number, end_number + 1):
        if number % 2 != 0:
            print(number)

# Шаг1. - start_number = int(input("Введите начальное число: ")): Запрашивает у пользователя ввод начального
# числа и преобразует введенное значение в целое число.

# Шаг2. - end_number = int(input("Введите конечное число: ")): Запрашивает у пользователя ввод конечного числа
# и также преобразует введенное значение в целое число.

# Шаг3. - if start_number > end_number: ... else: ...: Проверяет, что начальное число меньше или равно конечному.
# Если это условие выполняется, выводится сообщение об ошибке, и программа завершает выполнение.
# В противном случае переходит к следующему шагу.

# Шаг4. - print(f"Нечетные числа в диапазоне от {start_number} до {end_number}:"): Выводит заголовок с информацией
# о диапазоне чисел, для которого будут выводиться нечетные числа.

# Шаг5. - for number in range(start_number, end_number + 1):: Итерируется по числам в диапазоне от start_number до
# end_number включительно.

# Шаг6. - if number % 2 != 0: ...: Проверяет, является ли текущее число нечетным, используя оператор % для определения
# остатка от деления на 2. Если остаток не равен 0, то число нечетное.

# Шаг7. - print(number): Если число нечетное, оно выводится на экран.

# Вот таким образом, в результате выполнения этого кода на экране будет выведен список нечетных чисел в заданном
# пользователем диапазоне.

            # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
            # Вариант №2.б ↓
            start, end = map(int, input("Введите начальное и конечное число через пробел: ").split())
            print(f"Нечетные числа в диапазоне от {start} до {end}:",
                  *[number for number in range(start, end + 1) if number % 2 != 0])

# Шаг1. - map(int, input("Введите начальное и конечное число через пробел: ").split()):
# Запрашивает у пользователя ввод двух чисел, разделенных пробелом,
# затем преобразует эти строки в целые числа с помощью map.

# Шаг2. - start, end = ...: Распаковывает полученные значения в переменные start и end.

# Шаг3. - print(f"Нечетные числа в диапазоне от {start} до {end}:", ...):
# Выводит заголовок с информацией о диапазоне чисел, для которого будут выводиться нечетные числа.

# Шаг4. - *[number for number in range(start, end + 1) if number % 2 != 0]:
# Генератор списка создает список нечетных чисел в диапазоне от start до end + 1.
# Выражение number % 2 != 0 проверяет, является ли число нечетным. Затем * перед генератором списка распаковывает
# его элементы, чтобы они стали аргументами для функции print.

            # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
            # Вариант №2.в ↓ - просто вариант покороче
            print(*(number for number in
                    range(*map(int, input("Введите начальное и конечное число через пробел: ").split())) if
                    number % 2 != 0))
# Шаг1. - map(int, input("Введите начальное и конечное число через пробел: ").split()):
# Запрашивает у пользователя ввод двух чисел, разделенных пробелом, затем преобразует эти строки в целые числа
# с помощью map.

# Шаг2. - range(*...): Распаковывает полученные значения из map и передает их в функцию range, создавая диапазон
# чисел от начального до конечного.

# Шаг3. - number for number in ... if number % 2 != 0: Генератор списка создает список нечетных чисел в полученном
# диапазоне. Выражение number % 2 != 0 проверяет, является ли число нечетным.

# Шаг4. - print(*...): Распаковывает элементы генератора списка и передает их в функцию print.

# Таким образом, этот код вводит два числа от пользователя, создает генератор списка с нечетными числами в
# указанном диапазоне и выводит эти числа на экран в одну строку.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3.а ↓
#3. Нужно показать все четные числа в указанном диапазоне.
# Ввод двух чисел от пользователя
start_number = int(input("Введите начальное число: "))
end_number = int(input("Введите конечное число: "))
# Проверка, чтобы убедиться, что начальное число меньше или равно конечному
if start_number > end_number:
    print("Ошибка: Начальное число должно быть меньше или равно конечному.")
else:
    # Вывод всех четных чисел в указанном диапазоне
    print(f"Четные числа в диапазоне от {start_number} до {end_number}:")
    for number in range(start_number, end_number + 1):
        if number % 2 == 0:
            print(number)
# Шаг1. - Ввод чисел: Пользователь вводит два числа с клавиатуры, которые сохраняются в переменных
# start_number и end_number.

# Шаг2. - Проверка условия: start_number > end_number. Если это условие выполняется
# (т.е., если начальное число больше конечного), программа выводит сообщение об ошибке и завершается.

# Шаг3. - Цикл вывода четных чисел: Если условие не выполняется, программа переходит к следующему блоку.
# for number in range(start_number, end_number + 1):: Этот цикл for итерируется по числам в указанном диапазоне.
# Функция range принимает два аргумента: начальное число (start_number) и конечное число (end_number + 1).
# При использовании end_number + 1 гарантируется, что конечное число также будет включено в диапазон.
# if number % 2 == 0:: Условие проверяет, является ли число четным.
# Если да, то число выводится на экран с помощью print(number).

# Таким образом, программа запросит у пользователя два числа, проверит их корректность,
# и если все в порядке, выведет все четные числа в указанном диапазоне.

            # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
            # Вариант №3.б ↓
def print_even_numbers(start, end):
    print(f"Четные числа в диапазоне от {start} до {end}:")
    for num in range(start + (start % 2), end + 1, 2):
        print(num)
# Ввод двух чисел от пользователя
start_number, end_number = int(input("Введите начальное число: ")), int(input("Введите конечное число: "))
# Проверка, чтобы убедиться, что начальное число меньше или равно конечному
if start_number > end_number:
    print("Ошибка: Начальное число должно быть меньше или равно конечному.")
else:
    # Вызов функции для вывода четных чисел
    print_even_numbers(start_number, end_number)
# Шаг1. - Определение функции: def print_even_numbers(start, end): - ключевое слово def используется для определения
# функции. Функция принимает два аргумента (start и end), которые представляют начальное и конечное числа диапазона.

# Шаг2. - Вывод четных чисел внутри функции: print(f"Четные числа в диапазоне от {start} до {end}:") - вывод сообщения
# с использованием форматированной строки.
# for num in range(start + (start % 2), end + 1, 2): - цикл for, который итерирует по четным числам в диапазоне,
# начиная с ближайшего четного числа к start и заканчивая end. Шаг равен 2, чтобы учесть только четные числа.
# print(num) - вывод четного числа на экран.

# Шаг3. - Ввод чисел от пользователя и вызов функции:
# start_number, end_number = int(input("Введите начальное число: ")), int(input("Введите конечное число: ")) - ввод
# двух чисел от пользователя.
# if start_number > end_number: - проверка условия, чтобы убедиться, что начальное число меньше или равно конечному.
# В случае ошибки выводится сообщение.
# else: - если условие не выполняется, вызывается функция print_even_numbers(start_number, end_number),
# которая выводит четные числа в заданном диапазоне.

# Этот вариант позволяет лучше организовать код, изолировав логику вывода четных чисел в отдельную функцию.
# Это может сделать код более читаемым и повторно используемым.

            # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
            # Вариант №3.в ↓
start_number, end_number = map(int, input("Введите начальное и конечное числа через пробел: ").split())
print_even_numbers = lambda start, end: print(f"Четные числа в диапазоне от {start} до {end}:",
                                              [num for num in range(start + (start % 2), end + 1, 2)])
print_even_numbers(start_number, end_number) if start_number <= end_number else (
    print("Ошибка: Начальное число должно быть меньше или равно конечному."))
# Шаг1. - Ввод чисел от пользователя: map(int, input("Введите начальное и конечное числа через пробел: ").split()) -
# input считывает строку, split разбивает ее на слова, а map(int, ...) преобразует каждое слово в целое число.
# Это создает две переменные, start_number и end_number, которые содержат начальное и конечное числа.

# Шаг2. - Определение лямбда-функции: print_even_numbers = lambda start, end: ... - создание лямбда-функции
# (анонимной функции), которая принимает два аргумента (start и end). Функция использует list comprehension для
# формирования списка четных чисел в указанном диапазоне и выводит его.

# Шаг3. - Вызов лямбда-функции: print_even_numbers(start_number, end_number) - вызов лямбда-функции с передачей
# ей начального и конечного чисел. Это выведет четные числа в диапазоне, если начальное число не превышает конечное.

# Шаг4. - Тернарный оператор для проверки условия: if start_number <= end_number else print("Ошибка: Начальное число
# должно быть меньше или равно конечному.") - тернарный оператор используется для проверки условия.
# Если start_number больше end_number, выводится сообщение об ошибке.

# Этот код сокращен и объединен в одну строку для компактности. Важно помнить, что такие подходы могут быть менее
# читаемыми для других разработчиков, поэтому их использование следует обдумывать,
# основываясь на контексте и предпочтениях команды.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №4.а ↓
#4. Нужно показать все числа в указанном диапазоне в порядке убывания.
# Ввод двух чисел от пользователя
start_number = int(input("Введите начальное число: "))
end_number = int(input("Введите конечное число: "))
# Проверка, чтобы убедиться, что начальное число меньше или равно конечному
if start_number > end_number:
    print("Ошибка: Начальное число должно быть меньше или равно конечному.")
else:
    # Вывод всех чисел в указанном диапазоне в порядке убывания
    print(f"Числа в диапазоне от {start_number} до {end_number} в порядке убывания:")
    for number in range(end_number, start_number - 1, -1):
        print(number)
# Шаг1. - Ввод чисел: Пользователь вводит два числа с клавиатуры, которые сохраняются в
# переменных start_number и end_number.

# Шаг2. - Проверка условия: start_number > end_number. Если это условие выполняется (т.е., если начальное число
# больше конечного), программа выводит сообщение об ошибке и завершается.

# Шаг3. - Цикл вывода чисел в порядке убывания: Если условие не выполняется, программа переходит к следующему блоку.
# for number in range(end_number, start_number - 1, -1):: Этот цикл for итерируется по числам в указанном диапазоне в
# порядке убывания. Функция range принимает три аргумента: начальное число (end_number), конечное число
# (start_number - 1), и шаг убывания (-1).
# print(number): Каждое число в диапазоне выводится на экран.

# Шаг4. - Итог: Если пользователь ввел корректные значения (начальное число меньше или равно конечному),
# программа выведет все числа в указанном диапазоне в порядке убывания.
# В противном случае будет выведено сообщение об ошибке.

            # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
            # Вариант №4.б ↓
# Ввод двух чисел от пользователя
start_number = int(input("Введите начальное число: "))
end_number = int(input("Введите конечное число: "))

# Проверка, чтобы убедиться, что начальное число меньше или равно конечному
if start_number > end_number:
    print("Ошибка: Начальное число должно быть меньше или равно конечному.")
else:
    # Вывод чисел в порядке убывания с использованием цикла for
    print(f"Числа в диапазоне от {start_number} до {end_number} в порядке убывания:")
    for number in reversed(range(start_number, end_number + 1)):
        print(number)
# Шаг1. - Ввод чисел от пользователя: start_number = int(input("Введите начальное число: ")) - пользователю
# предлагается ввести начальное число, которое сохраняется в переменной start_number.
# end_number = int(input("Введите конечное число: ")) - пользователю предлагается ввести конечное число, которое
# сохраняется в переменной end_number.

# Шаг2. - Проверка условия: if start_number > end_number: - условие проверяет, что начальное число меньше или равно
# конечному. Если это условие не выполняется, программа переходит к блоку else.
# В противном случае выводится сообщение об ошибке.

# Шаг3. - Цикл вывода чисел в порядке убывания: for number in reversed(range(start_number, end_number + 1)): - цикл for
# итерируется по числам в диапазоне от start_number до end_number + 1, но порядок итерации инвертирован с
# использованием функции reversed(). Таким образом, числа выводятся в порядке убывания.
# print(number) - каждое число выводится на новой строке.

# Шаг4. - Итог: Если введенные пользователем числа корректны (начальное число меньше или равно конечному),
# программа выведет все числа в указанном диапазоне в порядке убывания. В противном случае будет выведено
# сообщение об ошибке.

            # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
            # Вариант №4.в ↓
print(*(range(end_number, start_number - 1, -1)) if start_number <= end_number else ["Ошибка: Начальное число должно"
                                                                                     " быть меньше или равно"
                                                                                     " конечному."], sep='\n')
# Шаг1. - Условный оператор: if start_number <= end_number: - это условный оператор. Если начальное
# число (start_number) меньше или равно конечному числу (end_number), то выполняется код до двоеточия. В противном
# случае (если начальное число больше конечного), выполняется код после else.

# Шаг2. - Формирование последовательности чисел или сообщения об ошибке: range(end_number, start_number - 1, -1) - если
# условие выполняется, то формируется обратная последовательность чисел от end_number до start_number с
# шагом -1 (то есть в порядке убывания). Это делается с помощью функции range.
# ["Ошибка: Начальное число должно быть меньше или равно конечному."] - если условие не выполняется, то формируется
# список с одним элементом - строкой сообщения об ошибке.

# Шаг3. - Использование print для вывода результатов: print(*..., sep='\n') - print используется для вывода
# результатов. *... распаковывает элементы последовательности (последовательности чисел или строки с ошибкой),
# и sep='\n' устанавливает символ новой строки между элементами для вывода на разных строках.

# Итак, в зависимости от того, выполняется ли условие start_number <= end_number, будет выведена либо
# последовательность чисел в порядке убывания, либо сообщение об ошибке, и результаты
# будут выведены на отдельных строках.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. - или так, коротко и ясно.
# Ввод пользователем двух чисел
start_num = int(input("Введите начальное число: "))
end_num = int(input("Введите конечное число: "))
# 1. Все числа в указанном диапазоне
print("Все числа в указанном диапазоне:")
for num in range(start_num, end_num + 1):
    print(num, end=" ")
# 2. Все нечетные числа в указанном диапазоне
print("\nВсе нечетные числа в указанном диапазоне:")
for num in range(start_num, end_num + 1):
    if num % 2 != 0:
        print(num, end=" ")
# 3. Все четные числа в указанном диапазоне
print("\nВсе четные числа в указанном диапазоне:")
for num in range(start_num, end_num + 1):
    if num % 2 == 0:
        print(num, end=" ")
# 4. Все числа в указанном диапазоне в порядке убывания
print("\nВсе числа в указанном диапазоне в порядке убывания:")
for num in range(end_num, start_num - 1, -1):
    print(num, end=" ")

# Подробнее:
# Шаг1. - Ввод пользователем двух чисел: Программа запрашивает у пользователя ввод двух чисел. start_num - начальное
# число, end_num - конечное число.
start_num = int(input("Введите начальное число: "))
end_num = int(input("Введите конечное число: "))
# Шаг2. - Все числа в указанном диапазоне: Программа использует цикл for для вывода всех чисел в указанном диапазоне.
print("Все числа в указанном диапазоне:")
for num in range(start_num, end_num + 1):
    print(num, end=" ")
# Шаг3. - Все нечетные числа в указанном диапазоне: Программа использует цикл for и проверку на нечетность для
# вывода всех нечетных чисел в указанном диапазоне.
print("\nВсе нечетные числа в указанном диапазоне:")
for num in range(start_num, end_num + 1):
    if num % 2 != 0:
        print(num, end=" ")
# Шаг4. - Все четные числа в указанном диапазоне: Программа использует цикл for и проверку на четность для вывода
# всех четных чисел в указанном диапазоне.
print("\nВсе четные числа в указанном диапазоне:")
for num in range(start_num, end_num + 1):
    if num % 2 == 0:
        print(num, end=" ")
# Шаг5. - Все числа в указанном диапазоне в порядке убывания: Программа использует цикл for и шаг -1 для вывода всех
# чисел в указанном диапазоне в порядке убывания.
print("\nВсе числа в указанном диапазоне в порядке убывания:")
for num in range(end_num, start_num - 1, -1):
    print(num, end=" ")

# Итог: Таким образом, каждая часть программы выполняет определенную операцию с числами в указанном диапазоне,
# в соответствии с заданными условиями.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №2.

# Дано: ↓

# Когда Павел учился в школе, он запоминал таблицу умножения прямоугольными блоками.
# Для тренировок ему бы очень пригодилась программа, которая показывала бы блок таблицы умножения.

# Напишите программу, на вход которой даются четыре числа a, b, c и d, каждое в своей строке.
# Программа должна вывести фрагмент таблицы умножения для всех чисел отрезка [a; b] на все числа отрезка [c;d].

# Числа a, b, c и d являются натуральными и не превосходят 10, a≤b, c≤d.
# Следуйте формату вывода из примера, для разделения элементов внутри строки используйте '\t' — символ табуляции.
# Заметьте, что левым столбцом и верхней строкой выводятся сами числа из заданных отрезков — заголовочные
# столбец и строка таблицы.

# Sample Input 1:

# 7
# 10
# 5
# 6

# Sample Output 1:
# 5          6
# 7          35         42
# 8          40         48
# 9          45         54
# 10         50         60

# Sample Input 2:

# 5
# 5
# 6
# 6

# Sample Output 2:

# 6
# 5         30

# Sample Input 3:

# 1
# 3
# 2
# 4

# Sample Output 3:

# 2           3           4
# 1           2           3           4
# 2           4           6           8
# 3           6           9           12

# Решение:

# Вариант №1.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Ввод данных
a = int(input())
b = int(input())
c = int(input())
d = int(input())
# Вывод заголовочной строки
# print('\t', end='') - просто чтобы все заработало закомментировал данную строчку
for j in range(c, d + 1):
    print(j, end='\t')
print()
# Вывод таблицы умножения
for i in range(a, b + 1):
    print(i, end='\t')
    for j in range(c, d + 1):
        print(i * j, end='\t')
    print()
# Шаг №1. - Эти строки кода считывают четыре целых числа с клавиатуры и присваивают их значения переменным a, b, c и d
a = int(input())
b = int(input())
c = int(input())
d = int(input())

# Шаг №2. - Этот шаг кода выводит верхнюю строку таблицы умножения
for j in range(c, d + 1):
    print(j, end='\t')
print()
# Цикл for проходит по значениям от c до d, выводя каждое число с символом табуляции ('\t') в конце.
# После завершения цикла происходит переход на новую строку с помощью print().

# Шаг №3. - Этот шаг кода создает таблицу умножения
for i in range(a, b + 1):
    print(i, end='\t')
    for j in range(c, d + 1):
        print(i * j, end='\t')
    print()
# Внешний цикл for проходит по значениям от a до b, выводя каждое число с символом табуляции.
# Внутренний цикл for проходит по значениям от c до d, выводя произведение текущих значений i и j с символом табуляции.
# После завершения внутреннего цикла происходит переход на новую строку с помощью print().

# Вариант №2.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Ввод данных
a = int(input())
b = int(input())
c = int(input())
d = int(input())
# Вывод заголовочной строки таблицы
print('\t'.join(map(str, range(c, d + 1))))
# Вывод таблицы умножения
for i in range(a, b + 1):
    print(f'{i}\t', end='')
    for j in range(c, d + 1):
        print(f'{i * j}\t', end='')
    print()

# Шаг №1. - Ввод данных
a = int(input())
b = int(input())
c = int(input())
d = int(input())
# И снова - эти строки кода считывают четыре целых числа с клавиатуры и присваивают их значения переменным a, b, c и d

# Шаг №2. - Вывод заголовочной строки таблицы
print('\t'.join(map(str, range(c, d + 1))))
# В этой строке используется метод range(c, d + 1), чтобы создать последовательность чисел от c до d включительно.
# Затем map(str, ...) преобразует каждое число в этой последовательности в строку. '\t'.join(...) объединяет строки с
# использованием символа табуляции ('\t'). Результат выводится с помощью print.

# Шаг №3. - Вывод таблицы умножения
for i in range(a, b + 1):
    print(f'{i}\t', end='')
    for j in range(c, d + 1):
        print(f'{i * j}\t', end='')
    print()
# В этом блоке кода используется внешний цикл for, который проходит по значениям от a до b (включительно).
# В каждой итерации внешнего цикла выводится число i с символом табуляции ('\t'). Затем идет вложенный цикл for,
# который проходит по значениям от c до d. В каждой итерации вложенного цикла выводится произведение i * j с
# символом табуляции. После завершения вложенного цикла происходит переход на новую строку с помощью print().


# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
  #~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ Циклы ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~#
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №1.

# Дано: ↓

# Написать программу для вывода узора по образцу, используя вложенный цикл.

# Output

*
* *
* * *
* * * *
* * * * *
* * * *
* * *
* *
*

# Решение:

# Вариант №1.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вложенный цикл для вывода узора
n = 5  # Количество строк в верхней части треугольника
# Верхняя часть треугольника
for i in range(n):
    for j in range(i + 1):
        print('*', end=' ')
    print()
# Нижняя часть треугольника
for i in range(n - 1, 0, -1):
    for j in range(i):
        print('*', end=' ')
    print()

# Шаг №1. - Нужно записать переменную в виде - n
n = 5
# Здесь устанавливается значение переменной n равным 5,
# что будет определять количество строк в верхней части треугольника.

# Шаг №2. - Теперь нам следует записать верхнюю часть треугольника
for i in range(n):
    for j in range(i + 1):
        print('*', end=' ')
    print()
# Внешний цикл for i in range(n) проходит по значениям от 0 до n-1, управляя количеством строк в верхней части
# треугольника.
# Внутренний цикл for j in range(i + 1) проходит по значениям от 0 до i, управляя количеством звездочек в каждой строке.
# В каждой итерации внутреннего цикла выводится звездочка с символом пробела в конце.
# После завершения внутреннего цикла происходит перевод строки.

# Шаг №3. - Теперь нам следует нижнюю часть треугольника
for i in range(n - 1, 0, -1):
    for j in range(i):
        print('*', end=' ')
    print()
# Внешний цикл for i in range(n - 1, 0, -1) проходит по значениям от n-1 до 1 с шагом -1, управляя количеством строк в
# нижней части треугольника.
# Внутренний цикл for j in range(i) проходит по значениям от 0 до i-1, управляя количеством звездочек в каждой строке.
# В каждой итерации внутреннего цикла выводится звездочка с символом пробела в конце.
# После завершения внутреннего цикла происходит перевод строки.

# Вариант №2.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
n = 5
# Верхняя часть треугольника
for i in range(n):
    print(' '.join(['*' for j in range(i + 1)]))
# Нижняя часть треугольника
for i in range(n - 1, 0, -1):
    print(' '.join(['*' for j in range(i)]))

# Шаг №1. - Установка переменной n:
n = 5
# Здесь устанавливается значение переменной n равным 5, что будет определять количество строк в верхней
# части треугольника.

# Шаг №2. - Верхняя часть треугольника:
for i in range(n):
    print(' '.join(['*' for j in range(i + 1)]))
# Внешний цикл for i in range(n) проходит по значениям от 0 до n-1,
# управляя количеством строк в верхней части треугольника.
# Внутренний цикл for j in range(i + 1) проходит по значениям от 0 до i,
# создавая список из звездочек с использованием генератора списка.
# join объединяет элементы списка в строку с пробелом в качестве разделителя.
# Результат выводится с помощью print.

# Шаг №3. - Нижняя часть треугольника:
for i in range(n - 1, 0, -1):
    print(' '.join(['*' for j in range(i)]))
# Внешний цикл for i in range(n - 1, 0, -1) проходит по значениям от n-1 до 1 с шагом -1,
# управляя количеством строк в нижней части треугольника.
# Внутренний цикл for j in range(i) проходит по значениям от 0 до i-1,
# создавая список из звездочек с использованием генератора списка.
# join объединяет элементы списка в строку с пробелом в качестве разделителя.
# Результат выводится с помощью print.

# Вариант №3.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
n = 5
# Верхняя часть треугольника
[print(' '.join('*' for _ in range(i + 1))) for i in range(n)]
# Нижняя часть треугольника
[print(' '.join('*' for _ in range(i))) for i in range(n - 1, 0, -1)]

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №2.

# Дано: ↓

# Напишите программу, которая считывает целые числа с консоли по одному числу в строке.
    # Для каждого введённого числа проверить:
        # ➢ если число меньше 10, то пропускаем это число;
        # ➢ если число больше 100, то прекращаем считывать числа;
        # ➢ в остальных случаях вывести это число обратно на консоль в отдельной строке.

# Sample Input 1:

# 12
# 4
# 2
# 58
# 112

# Sample Output 1:

# 12
# 58

# Решение:

# Вариант №1.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
while True:
    try:
        num = int(input())

        if num < 10:
            continue  # Пропускаем числа меньше 10
        elif num > 100:
            break  # Прекращаем считывание чисел, если число больше 100
        else:
            print(num)  # Выводим число обратно на консоль в отдельной строке

    except ValueError:
        print("Введите целое число")

# Код в работе:

# Шаг №1. - Бесконечный цикл (while True):
while True:
# Эта строка создает бесконечный цикл, который будет выполняться до тех пор, пока не будет прерван оператором break.

# Шаг №2. - Блок try для считывания числа:
try:
    num = int(input())
# try вводит блок, в котором выполняется код, который может вызвать исключение.
# num = int(input()) считывает строку с консоли и преобразует её в целое число (int).
# Если ввод не является целым числом, возникает исключение ValueError.

# Шаг №3. - Проверка числа на меньше 10:
if num < 10:
    continue
# Если введенное число (num) меньше 10, то выполняется оператор continue, который прерывает текущую итерацию цикла
# и переходит к следующей итерации.

# Шаг №4. - Проверка числа на больше 100:
    elif num > 100:
        break
# Если введенное число (num) больше 100, то выполняется оператор break, который прерывает выполнение цикла,
# завершая считывание чисел.

# Шаг №5. - Вывод числа в противном случае:
else:
print(num)
# Если число находится в диапазоне от 10 до 100 (включительно), оно выводится на консоль с новой строки.

# Шаг №6. - Обработка исключения ValueError:
except ValueError:
    print("Введите целое число")
# Если возникает исключение ValueError (в случае ввода не целого числа),
# программа выводит сообщение "Введите целое число".

# Вариант №2.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
for _ in range(float('inf')):
    try:
        num = int(input())

        if num < 10:
            continue  # Пропускаем числа меньше 10
        elif num > 100:
            break  # Прекращаем считывание чисел, если число больше 100
        else:
            print(num)  # Выводим число обратно на консоль в отдельной строке

    except ValueError:
        print("Введите целое число")

# Здесь мы используем for _ in range(float('inf')) для создания бесконечного цикла.
# Внутри цикла выполняются те же самые проверки и действия, что и в предыдущем варианте кода.
# Этот вариант может быть более кратким, но некоторые могут предпочесть использование while True для явного
# обозначения бесконечного цикла.

# Вариант №3.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
for _ in range(7777):  # Выберем достаточное большое число итераций
    try:
        num = int(input())

        if num < 10:
            continue  # Пропускаем числа меньше 10
        elif num > 100:
            break  # Прекращаем считывание чисел, если число больше 100
        else:
            print(num)  # Выводим число обратно на консоль в отдельной строке

    except ValueError:
        print("Введите целое число")
else:
    print("Достигнуто максимальное количество итераций")

# Также можно использовать структуру for-else вместо бесконечного цикла.
# Эта структура выполняет код в блоке else, если цикл завершается "естественным" образом, то есть не прерывается
# оператором break. В этом случае, "естественное" завершение цикла будет, если введенное число больше 100.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №3.

# Дано: ↓

# Совершенным числом называется целое положительное число, равное сумме своих положительных делителей,
# исключая само число. Например, 6 имеет делители 1, 2 и 3 (исключая само себя), а 1 + 2 + 3 = 6,
# поэтому 6 — совершенное число. Напишите программу, которая выводит все совершенные числа от 1 до 100.

# Решение:

# Вариант №1.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
for num in range(1, 101):
    divisors_sum = 0

    for i in range(1, num):
        if num % i == 0:
            divisors_sum += i

    if divisors_sum == num:
        print(num)

# Шаг №1. - Цикл по числам от 1 до 100:
for num in range(1, 101):
# Внешний цикл перебирает числа от 1 до 100.

# Шаг №2. - Инициализация переменной для суммы делителей:
divisors_sum = 0
# Для каждого числа мы будем вычислять сумму его положительных делителей.

# Шаг №3. - Вложенный цикл для поиска делителей:
for i in range(1, num):
# Внутренний цикл перебирает числа от 1 до num - 1 для поиска делителей числа num.

# Шаг №4. - Проверка, является ли i делителем num:
if num % i == 0:
# Если i является делителем num, то добавляем i к сумме делителей.

# Шаг №5. - Вычисление суммы делителей:
divisors_sum += i
# Увеличиваем сумму делителей на i.

# Шаг №6. - Проверка, является ли число совершенным:
if divisors_sum == num:
# Если сумма делителей равна самому числу, то число совершенное.

# Шаг №7. - Вывод совершенного числа:
print(num)
# Выводим число, если оно совершенное.

# Теперь программа перебирает числа от 1 до 100, для каждого числа находит сумму его положительных делителей и выводит
# числа, для которых эта сумма равна самому числу.

# Вариант №2.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вместо того чтобы проверять все числа от 1 до num - 1, мы можем ограничить проверку до num // 2 + 1,
# поскольку наибольший возможный делитель числа num не превысит num // 2.
for num in range(2, 101):  # Начинаем с 2, так как 1 не совершенное число
    divisors_sum = 1  # Инициализируем сумму делителей как 1, учитывая 1 как делитель

    for i in range(2, num // 2 + 1):
        if num % i == 0:
            divisors_sum += i

    if divisors_sum == num:
        print(num)

# Шаг №1. - Мы начинаем с числа 2, так как 1 не является совершенным числом.
# Шаг №2. - Мы инициализируем сумму делителей как 1, учитывая 1 как делитель.
# Шаг №3. - Внутренний цикл проверяет делители от 2 до num // 2 + 1.
# Шаг №4. - Также мы можем использовать range(2, int(num**0.5) + 1), что даст тот же результат,
# но с меньшим количеством итераций.

# Как мне кажется, такой вариант уменьшает количество проверок и делает программу более эффективной.

# Вариант №3.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# На это я потратил весь день - в поисках как еще можно решить (слишком муторно)
# И так:
# Мы можем воспользоваться тем фактом, что совершенные числа имеют определенную структуру. Для проверки,
# является ли число совершенным, мы можем воспользоваться формулой Евклида:

# 2p − 1⋅(2p − 1)

# где 2p − 1 — простое число (называемое числом Мерсенна), а p тоже простое число. Такие числа 2p − 1 называются
# числами Мерсенна, и для каждого простого числа p соответствующее число 2p − 1 является совершенным.

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def perfect_number(p):
    return (2**(p-1)) * (2**p - 1)

for p in range(2, 8):  # Ограничимся небольшими значениями p для примера
    if is_prime(2**p - 1):
        print(perfect_number(p))

# Шаг №1. - Функция для проверки простоты числа:
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True
# Эта функция is_prime проверяет, является ли число простым. Она возвращает True, если число простое,
# и False в противном случае.

# Шаг №2. - Функция для вычисления совершенного числа:
def perfect_number(p):
    return (2**(p-1)) * (2**p - 1)
# Эта функция perfect_number принимает простое число p и возвращает соответствующее совершенное число,
# используя формулу Евклида.

# Шаг №3. - Цикл для поиска совершенных чисел:
for p in range(2, 8):
    if is_prime(2**p - 1):
        print(perfect_number(p))
# Здесь мы используем цикл для проверки значений p от 2 до 7 (небольшие значения для примера). Если 2p - 1
# является простым числом, мы выводим соответствующее совершенное число.





