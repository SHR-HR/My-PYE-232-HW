# Дата: 12.11.2023
# Курс: Разработка Web-приложений на Python, с применением Фреймворка Django
# Дисциплина: Основы программирования на Python

# Домашнее задание №03. Логические выражения и операторы.

# Задание №1.

# Дано:

# Напишите программу, в которой я ввожу целые числа a, b, c.
# Если существует треугольник со сторонами a, b, c,
# то программа выведет true, иначе false.

# Решение:

# Вариант №1.
a, b, c = int(input("Введите a: ")), int(input("Введите b: ")), int(input("Введите c: "))
print("True" if a + b > c and a + c > b and b + c > a else "False")
# Я решил сразу попробовать использовать оператор условного выражения,
# чтобы сделать код более компактным.
# Он проверяет условие a + b > c and a + c > b and b + c > a,
# и возвращает "True", если условие выполняется, и "False" если условие не соблюдено.

# Вариант №2.
a = b = c = int(input("Введите значение a, b и c: "))
# Проверка условий для существования треугольника
if a > 0:
    print("True - Треугольник существует.")
else:
    print("False - Треугольник не существует.")
#Тут я хочу проверить, если значение a больше нуля, и если это так, то выведет "True",
# в противном случае выведет "False".

# Вариант №3.
a, b, c = int(input("Введите a: ")), int(input("Введите b: ")), int(input("Введите c: "))
# Проверка условий для существования треугольника
print(all([a + b > c, a + c > b, b + c > a]))
# Я написал этот код, чтобы также проверить условия существует ли треугольник,
# но уже с использованием оператора all для более компактной записи.

# Вариант №4.
# Вводим значения сторон (целые числа)
a = int(input("Введите длину стороны a: "))
b = int(input("Введите длину стороны b: "))
c = int(input("Введите длину стороны c: "))
# Далее следует проверка условий для существования треугольника
if (a + b > c) and (a + c > b) and (b + c > a):
    print("True - Треугольник существует.")
else:
    print("False - Треугольник не существует.")
# На этот раз, тут все наглядно просто и понятно. Тут в программе использую оператор and
# для комбинирования условий, проверяя, что каждая пара сторон образует допустимую
# комбинацию для треугольника. Если все три условия выполняются, программа выводит "True", иначе "False".

# Этот Вариант мне подсказала Любовь, сказала, что можно и по просто-му.

# Конечно! В данном случае не стоит забывать об "Таблице истинности".
# Я хотел использовать and и or

# and
# True  and True  -> True
# True  and False -> False
# False and True  -> False
# False and False -> False
#
# or
# True  or True  -> True
# True  or False -> True
# False or True  -> True
# False or False -> False

# Из таблицы истинности видно,
# что оператор and возвращает True только в том случае,
# если оба условия истинны, в противном случае он возвращает False.
# Оператор or возвращает True, если хотя бы одно из условий истинно.

# Если мы используем оба оператора and и or в одном и том же выражении,
# то это может привести к неожиданным результатам,
# так как or может перекрыть результат, даже если первое условие and ложно.

# Вот к примеру такой пример:
a, b, c = int(input("Введите a: ")), int(input("Введите b: ")), int(input("Введите c: "))
# Не рекомендуется использовать оба оператора в одном условии
print((a + b > c and a + c > b) or b + c > a)
# В данном случае, если хотя бы одно из условий (a + b > c and a + c > b) или
# (b + c > a) истинно, то результат будет True.
# Важно понимать, что это не эквивалентно проверке всех трех условий для существования треугольника.
# Лучше использовать только оператор and для корректной проверки всех условий.
print((a + b > c and a + c > b) or b + c > a)
# Если хотя бы одно из условий (a + b > c and a + c > b) и (b + c > a) истинно,
# то результат будет True, что может не соответствовать вашим ожиданиям при проверке
# существования треугольника.

# Вариант №5.
a, b, c = int(input("Введите a: ")), int(input("Введите b: ")), int(input("Введите c: "))
# Проверка условий для существования треугольника
conditions = [a + b > c, a + c > b, b + c > a]
print(all(conditions))
# Тут я попробовал все упростить. Если все верно, то conditions - это же список булевых значений,
# представляющих собой условия для существования треугольника.
# Функция all() возвращает True, если все элементы списка истинны, и False если истины нет.



# Задание №2.

# Дано:

# Напишите программу, в которой я ввожу число a.
# Если число, а является четным, то программа выведет true, иначе false.

# Решение:

# Вариант №1.
a = int(input("Введите число a: "))
# Проверка на четность
result = a % 2 == 0
print(result)
# Данат, в этом варианте я использовал "процент" в качестве оператора, для решения задачи.
# Если все так как я подумал, то % будет вычислять остаток от деления числа a на 2.
# Если остаток равен 0, то число четное, и программа выводит True, а если не четное то выводит False.

# Вариант №2.
a = int(input("Введите число a: "))
if a % 2 == 0:
    print("True")
else:
    print("False")
# Можно, я думаю также можно использовать "if" - для проверки.

# Вариант №3.
a = int(input("Введите число a: "))
print("True" if a % 2 == 0 else "False")
# Или просто вывод четности в виде строки.

# Вариант №4.
a = int(input("Введите число a: "))
result = a & 1 == 0
print(result)
# В этом случае мы используем побитовое "&" с числом 1.
# Если число четное, то младший бит равен 0, и результат будет True.
# Тут мне подсказал уже Яндекс.



# Задание №3.

# Дано:

# Напишите программу, в которой я ввожу три целостных чисел a, b и c,
# и если сумма a и b больше c, то программа выведет true, иначе false.

# Решение:

# Вариант №1.
# Вводим три целых числа
a = int(input("Введите число a: "))
b = int(input("Введите число b: "))
c = int(input("Введите число c: "))
# Вычисляем сумму a и b
sum_ab = a + b
# Проверяем условие
if sum_ab > c:
    print("True - Сумма a и b больше c.")
else:
    print("False - Сумма a и b не больше c.")

# Теперь давайте разберемся с каждой частью кода:

# input() используется для ввода данных с клавиатуры. int(input(...))
# преобразует введенные данные в целые числа.

# a, b, и c - это переменные, в которых хранятся введенные значения.

# sum_ab = a + b - вычисляет сумму чисел a и b и сохраняет результат в переменной sum_ab.

# if sum_ab > c: - это условный оператор.
# Если сумма a и b больше c, то программа выполнит код внутри блока if, иначе
# выполнит код в блоке else.

# print("True - Сумма a и b больше c.") и
# print("False - Сумма a и b не больше c.") - выводят соответствующее сообщение в зависимости
# от выполнения условия.

# Таким образом, программа проверяет условие "Сумма a и b больше c"
# и выводит соответствующий результат.

# Вариант №2.
# Вводим три целых числа
a = int(input("Введите число a: "))
b = int(input("Введите число b: "))
c = int(input("Введите число c: "))
# Проверяем условие и выводим результат
print(a + b > c)
# Тут просто так, условие a + b > c сразу передается в функцию print(),
# которая выведет True, если условие выполняется, и False если нет.

# Вариант №3.
# Вводим три целых числа
a = int(input("Введите число a: "))
b = int(input("Введите число b: "))
c = int(input("Введите число c: "))
# Проверяем условие
result = a + b > c
# Выводим результат
print(result)
# Думаю, что тут и так все понятно.



# Задание №4.

# Дано:

# Напишите программу, в которой я ввожу два целостных числа,
# и если первое число больше второго, то программа выведет true, иначе false.

# Решение:

# Вариант №1.
# Вводим два целых числа
num1 = int(input("Введите первое число: "))
num2 = int(input("Введите второе число: "))
# Проверяем условие и выводим результат
print(num1 > num2)
# Здесь так как нет a, b, c - просто указываю num1 и num2. Числа же.
# Просто сравниваем num1 и num2, и если num1 больше num2, то программа выведет True,
# а если нет то - False.

# Вариант №2.
# Вводим два целых числа
num1 = int(input("Введите первое число: "))
num2 = int(input("Введите второе число: "))
# Проверяем условие и выводим результат
if num1 > num2:
    print("True")
else:
    print("False")
# Здесь я подумал использовать оператор "if" и "else".

# Вариант №3.
# Вводим два целых числа
num1 = int(input("Введите первое число: "))
num2 = int(input("Введите второе число: "))
# Выводим результат в виде строки
print("True" if num1 > num2 else "False")
# Тоже самое, только короче.

# Вариант №4.
# Вводим два целых числа
num1 = int(input("Введите первое число: "))
num2 = int(input("Введите второе число: "))
# Проверяем, является ли num1 максимальным числом
print(num1 == max(num1, num2))
# Тут я уже спросил у Яндекса, как еще можно сравнить два и более чисел в Python-e.

                # Памятка к варианту №4.

                # num1 = 10
                # num2 = 5

                # maximum = max(num1, num2)

                # print(maximum)  # Выведет 10, потому что num1 больше num2

# В моем конкретном случае print(num1 == max(num1, num2)) проверяет, является ли num1
# максимальным числом из двух введенных. Если num1 равно максимальному из num1 и num2,
# то условие будет истинным и программа выведет True, в противном случае - False.



# Вариант №5.
# Вводим два целых числа
num1 = int(input("Введите первое число: "))
num2 = int(input("Введите второе число: "))
# Проверяем условия и выводим результат
if num1 > num2:
    print("True - Первое число больше второго.")
elif num1 == num2:
    print("Числа равны друг другу.")
else:
    print("False - Первое число не больше второго.")
# В данном случае, все как на уроке. Этот код сначала проверяет, является ли num1 больше num2,
# затем проверяет, равны ли они, и, наконец, выводит соответствующий результат.




