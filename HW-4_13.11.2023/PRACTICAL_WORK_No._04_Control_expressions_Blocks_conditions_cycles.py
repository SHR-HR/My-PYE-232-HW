# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Дата: 15 ноября 2023

# Курс: Разработка Web-приложений на Python, с применением Фреймворка Django
# Дисциплина: Основы программирования на Python

# Домашнее задание №4.- ПРАКТИЧЕСКАЯ РАБОТА №4. УПРАВЛЯЮЩИЕ ВЫРАЖЕНИЯ. БЛОКИ, УСЛОВИЯ, ЦИКЛЫ

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №1.

# Дано: ↓

# Напишите программу, в которой я ввожу два целостных числа, и если первое число больше второго,
# то программа выведет true, иначе false.

# Решение: ↓

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
# Ввод двух целых чисел
num1 = int(input("Введите первое целое число: "))
num2 = int(input("Введите второе целое число: "))
# Проверка условия и вывод результата
result = num1 > num2
print(result)

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓
# Ввод двух целых чисел
num1 = int(input("Введите первое целое число: "))
num2 = int(input("Введите второе целое число: "))
# Проверка условия и вывод результата
if num1 > num2:
    print("True")
else:
    print("False")

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓
# Ввод двух целых чисел
num1 = int(input("Введите первое целое число: "))
num2 = int(input("Введите второе целое число: "))
# Использование тернарного оператора для определения результата
result = "True" if num1 > num2 else "False"
print(result)

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №4. ↓
# Ввод двух целых чисел
num1 = int(input("Введите первое целое число: "))
num2 = int(input("Введите второе целое число: "))
# Проверка условия с использованием функции max()
result = max(num1, num2) == num1
print(result)
# Этот код сравнивает максимальное из двух чисел 'max(num1, num2)' с первым числом 'num1'.
# Если они равны, то выводится 'True', иначе - 'False'.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №5. ↓
# Ввод двух целых чисел
num1 = int(input("Введите первое целое число: "))
num2 = int(input("Введите второе целое число: "))
# Проверка условий и вывод результата
if num1 == num2:
    print("Числа равны")
elif num1 > num2:
    print("Первое число больше второго")
else:
    print("Второе число больше первого")

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №6. ↓
# Ввод операции и двух целых чисел
operation = input("Введите операцию (сравнение, сложение и т.д.): ")
num1 = int(input("Введите первое целое число: "))
num2 = int(input("Введите второе целое число: "))
# Выполнение выбранной операции
if operation.lower() == 'сравнение':
    result = num1 > num2
    print(f"Результат сравнения: {result}")
elif operation.lower() == 'сложение':
    result = num1 + num2
    print(f"Результат сложения: {result}")
# Добавьте дополнительные условия для других операций, если необходимо
else:
    print("Неподдерживаемая операция. Пожалуйста, выберите сравнение или сложение.")

# Подробнее:
#Шаг №1. - Ввод операции и чисел:
operation = input("Введите операцию (сравнение, сложение и т.д.): ")
num1 = int(input("Введите первое целое число: "))
num2 = int(input("Введите второе целое число: "))
# 'input()' используется для ввода данных с клавиатуры.
# 'int()' используется для преобразования введенных данных в целые числа.

#Шаг №2. - это выбор операции и выполнение соответствующего действия:
if operation.lower() == 'сравнение':
    result = num1 > num2
    print(f"Результат сравнения: {result}")
elif operation.lower() == 'сложение':
    result = num1 + num2
    print(f"Результат сложения: {result}")
else:
    print("Неподдерживаемая операция. Пожалуйста, выберите сравнение или сложение.")
# 'if-elif-else' используется для проверки введенной операции.
# 'lower()' приводит введенную строку к нижнему регистру, чтобы сделать проверку нечувствительной к регистру.

# Шаг №3. - Вывод результата:
# В зависимости от выбранной операции выводится соответствующий результат.

# Вы можете расширить этот код, добавив новые ветви для других операций, которые вы хотите поддержать.
# Также, вы можете добавить дополнительные проверки для обработки различных сценариев ввода пользователя.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №7. ↓
def compare_numbers(num1, num2):
    try:
        result = int(num1) > int(num2)
        return result
    except ValueError:
        raise ValueError("Ошибка: Введите целые числа")

def perform_operation(operation, num1, num2):
    if operation.lower() == 'сравнение':
        return compare_numbers(num1, num2)
    elif operation.lower() == 'сложение':
        try:
            result = int(num1) + int(num2)
            return result
        except ValueError:
            raise ValueError("Ошибка: Введите целые числа для сложения")
    else:
        raise ValueError("Неподдерживаемая операция. Пожалуйста, выберите сравнение или сложение.")

def main():
    try:
        operation = input("Введите операцию (сравнение, сложение и т.д.): ")
        num1 = input("Введите первое число: ")
        num2 = input("Введите второе число: ")

        if operation.lower() in ['сравнение', 'сложение']:
            result = perform_operation(operation, num1, num2)
            if isinstance(result, bool):
                print(f"Результат сравнения: {result}")
            else:
                print(f"Результат сложения: {result}")
        else:
            raise ValueError("Неподдерживаемая операция. Пожалуйста, выберите сравнение или сложение.")
    except ValueError as e:
        print(f"Ошибка: {e}")

if __name__ == "__main__":
    main()

# Подробнее:
#Шаг №1. - Функция 'compare_numbers':
def compare_numbers(num1, num2):
    try:
        result = int(num1) > int(num2)
        return result
    except ValueError:
        raise ValueError("Ошибка: Введите целые числа")
# 'compare_numbers' - это функция, которая сравнивает два числа. Она использует конструкцию 'try-except'
# чтобы обработать возможное исключение 'ValueError', которое может возникнуть при попытке преобразования введенных
# значений в целые числа. Если введены нецелые числа, генерируется исключение с сообщением об ошибке.

#Шаг №2. - Функция perform_operation:
def perform_operation(operation, num1, num2):
    if operation.lower() == 'сравнение':
        return compare_numbers(num1, num2)
    elif operation.lower() == 'сложение':
        try:
            result = int(num1) + int(num2)
            return result
        except ValueError:
            raise ValueError("Ошибка: Введите целые числа для сложения")
    else:
        raise ValueError("Неподдерживаемая операция. Пожалуйста, выберите сравнение или сложение.")
# 'perform_operation' - это функция, которая выполняет операции в зависимости от введенной операции.
# Если введена операция "сравнение", то вызывается 'compare_numbers'.
# Если введена операция "сложение", то выполняется сложение чисел.
# И снова используется 'try-except' для обработки возможных исключений.

#Шаг №3. - Основная функция 'main':
def main():
    try:
        operation = input("Введите операцию (сравнение, сложение и т.д.): ")
        num1 = input("Введите первое число: ")
        num2 = input("Введите второе число: ")

        if operation.lower() in ['сравнение', 'сложение']:
            result = perform_operation(operation, num1, num2)
            if isinstance(result, bool):
                print(f"Результат сравнения: {result}")
            else:
                print(f"Результат сложения: {result}")
        else:
            raise ValueError("Неподдерживаемая операция. Пожалуйста, выберите сравнение или сложение.")
    except ValueError as e:
        print(f"Ошибка: {e}")
# 'main' - это основная функция программы.
# Она запрашивает у пользователя операцию и числа, затем вызывает 'perform_operation' для выполнения операции.
# Используется 'try-except' для обработки возможных ошибок ввода пользователя или выполнения операций.

#Шаг №4. - Защита от прямого импорта:
if __name__ == "__main__":
    main()
# Эта конструкция 'if __name__ == "__main__":' обеспечивает выполнение кода внутри блока только в случае
# прямого запуска скрипта, а не при его импорте в другой файл. Это позволяет избежать выполнения кода,
# когда скрипт используется как модуль в другом месте.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №8. ↓
result = True if int(input("Введите первое целое число: ")) > int(input("Введите второе целое число: ")) else False
print(f"Результат сравнения: {result}")
# В этой строке кода 'result' будет равно 'True', если первое введенное число больше второго, и 'False' если нет.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №9. ↓
while True:
    try:
        num1 = int(input("Введите первое целое число: "))
        num2 = int(input("Введите второе целое число: "))

        if num1 == num2:
            print("Числа равны. Повторите ввод.")
            continue

        result = num1 > num2
        print(f"Результат сравнения: {result}")
        break
    except ValueError:
        print("Ошибка: Введите целые числа.")
# В этом коде используется цикл 'while' 'True', который будет выполняться бесконечно,
# пока не будет вызван 'break'. Оператор 'continue' используется для перехода на следующую итерацию цикла,
# если введены некорректные данные. Операторы '+=', '==' используются для инкремента и сравнения чисел.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №10. ↓ - Цикл 'for' с операторами 'break' и 'continue': (Познакомились с ними на уроке 15.11.2023)
for _ in range(3):  # Позволяет пользователю ввести числа не более 3 раз
    try:
        num1 = int(input("Введите первое целое число: "))
        num2 = int(input("Введите второе целое число: "))

        if num1 == num2:
            print("Числа равны. Повторите ввод.")
            continue

        result = num1 > num2
        print(f"Результат сравнения: {result}")
        break
    except ValueError:
        print("Ошибка: Введите целые числа.")

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №11. ↓ - Цикл 'while' с использованием операторов '+=' и '==': также познакомились с ними на уроке 15.11.2023)
counter = 0
while counter < 3:
    try:
        num1 = int(input("Введите первое целое число: "))
        num2 = int(input("Введите второе целое число: "))

        if num1 == num2:
            print("Числа равны. Повторите ввод.")
            counter += 1
            continue

        result = num1 > num2
        print(f"Результат сравнения: {result}")
        break
    except ValueError:
        print("Ошибка: Введите целые числа.")


# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №2.

# Дано: ↓

# Напишите программу, в которой я ввожу три целостных чисел a, b и c, и если сумма a и b больше c,
# то программа выведет true, иначе false.

# Решение: ↓

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
# Решим эту задачу с использованием цикла 'for', операторов 'break', 'continue', условия 'if', и оператора '+=' для
# подсчета количества попыток ввода:
for _ in range(3):  # Позволяет пользователю ввести числа не более 3 раз
    try:
        a = int(input("Введите целое число a: "))
        b = int(input("Введите целое число b: "))
        c = int(input("Введите целое число c: "))

        if a + b > c:
            print("Результат: true")
        else:
            print("Результат: false")

        break
    except ValueError:
        print("Ошибка: Введите целые числа.")
# В этом коде, как и в предыдущих примерах, используется цикл для обработки возможных ошибок ввода.
# Если пользователь вводит некорректные данные, программа сообщает об ошибке и предлагает ввести данные заново.
# Если данные введены корректно, программа вычисляет сумму 'a + b' и сравнивает ее c'c',
# выводя соответствующий результат.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓
# Еще один пример, используя цикл 'while':
counter = 0
while counter < 3:
    try:
        a = int(input("Введите целое число a: "))
        b = int(input("Введите целое число b: "))
        c = int(input("Введите целое число c: "))

        if a + b > c:
            print("Результат: true")
        else:
            print("Результат: false")

        break
    except ValueError:
        print("Ошибка: Введите целые числа.")
        counter += 1
# В этом коде также используется цикл, который позволяет пользователю вводить данные не более 3 раз.
# Если пользователь вводит некорректные данные, программа сообщает об ошибке и предлагает ввести данные заново.
# Если данные введены корректно, программа вычисляет сумму 'a + b' и сравнивает ее с 'c',
# выводя соответствующий результат.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓
# Короткий вариант:
result = (sum(map(int, input("Введите три целых числа через пробел: ").split())) >
          int(input("Введите третье целое число: ")))
print("Результат:", result)
# Этот код вводит три целых числа, разделенных пробелом, преобразует их в список с помощью 'split()' и 'map(int, ...)',
# затем вычисляет сумму чисел и сравнивает ее с третьим числом, выводя соответствующий результат.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №3.

# Дано: ↓

# Напишите программу, в которой я ввожу число a. Если число, а является четным, то программа выведет true, иначе false.

# Решение: ↓

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓ - Цикл for и условие if:
for _ in range(3):  # Позволяет пользователю ввести число не более 3 раз
    try:
        a = int(input("Введите целое число a: "))

        result = a % 2 == 0
        print("Результат:", result)

        break
    except ValueError:
        print("Ошибка: Введите целое число.")

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓ - Цикл while с оператором break:
counter = 0
while counter < 3:
    try:
        a = int(input("Введите целое число a: "))

        result = a % 2 == 0
        print("Результат:", result)

        break
    except ValueError:
        print("Ошибка: Введите целое число.")
        counter += 1

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓ - Однострочный вариант с использованием input и print:
print("Результат:", int(input("Введите целое число a: ")) % 2 == 0)

# Я тут подумал, и придумал, а что если во всех этих вариантах программа вводит число 'a',
# проверяет его на четность с использованием операции '%' (остаток от деления на 2) и выводит результат.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №4. ↓ - С использованием тернарного оператора.
a = int(input("Введите целое число a: "))
result = True if a % 2 == 0 else False
print("Результат:", result)

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №5. ↓ - Такой-же как и - Вариант №4 - только тут использую только 'print'
print("Результат:", True if int(input("Введите целое число a: ")) % 2 == 0 else False)

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №6. ↓ - Тут я попробовал использовать прямое преобразование bool-евого значения - вроде-бы правильно
a = int(input("Введите целое число a: "))
result = bool(a % 2 == 0)
print("Результат:", result)

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №7. ↓ - Использовал арифметическое преобразование в 'int':
print("Результат:", int(input("Введите целое число a: ")) % 2 == 0)

# Так вот все эти варианты решают задачу проверки четности введенного числа a,
# но предлагают различные стили написания кода. Надеюсь 7-ми вариантов будет достаточно.


# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №4 - Четность числа

# Дано: ↓

# Определите, является ли введенное пользователем число четным. 0 является четным числом.

# Решение: ↓

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓ - Цикл 'for' с условием 'if'
for _ in range(2):  # Позволяет пользователю ввести число не более 2 раз
    try:
        number = int(input("Введите целое число: "))

        if number % 2 == 0:
            print(f"{number} - четное число.")
        else:
            print(f"{number} - нечетное число.")

        break
    except ValueError:
        print("Ошибка: Введите целое число.")

# Подробнее о коде:
# 1. 'for _ in range(2):': Это цикл 'for', который будет выполняться два раза. Здесь '_' используется в качестве
# временной переменной, которая не используется внутри цикла.
# Такой стиль часто используется, когда значение переменной не требуется.

# 2. 'try:': Начало блока кода, в котором может возникнуть исключение (ошибка).

# 3. 'number = int(input("Введите целое число: "))': Пользователю предлагается ввести целое число,
# и введенное значение преобразуется в целое число 'int'. Если введенные данные не могут быть преобразованы
# в целое число, возникает исключение 'ValueError'.

# 4. 'if number % 2 == 0:': Проверяется, является ли введенное число четным '%' - оператор остатка от деления на 2.

# 5. 'print(f"{number} - четное число.")' и 'print(f"{number} - нечетное число.")': В зависимости от того,
# четное или нечетное число было введено, выводится соответствующее сообщение.

# 6. 'break': Если пользователь успешно ввел целое число и программа дошла до этой строки,
# она выходит из цикла 'for', даже если это произошло на первой итерации.

# 7. 'except ValueError:': Если возникло исключение 'ValueError' (т.е. введенные данные не могут
# быть преобразованы в целое число), программа переходит в этот блок кода.

# 8. 'print("Ошибка: Введите целое число.")': Выводится сообщение об ошибке.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓ - Цикл 'while' с использованием оператора 'break'
counter = 0
while counter < 2:
    try:
        number = int(input("Введите целое число: "))

        if number % 2 == 0:
            print(f"{number} - четное число.")
        else:
            print(f"{number} - нечетное число.")

        break
    except ValueError:
        print("Ошибка: Введите целое число.")
        counter += 1

# Подробнее о коде:
# 1. 'counter = 0': Создается переменная 'counter' и ей присваивается значение 0.
# Она будет использоваться для отслеживания количества попыток ввода данных.

# 2. 'while counter < 2:': Это начало цикла 'while', который будет выполняться, пока значение 'counter' меньше 2.

# 3. 'try:': Здесь начинается блок кода, который может вызвать исключение (ошибку).

# 4. 'number = int(input("Введите целое число: "))': Пользователю предлагается ввести целое число,
# и это значение преобразуется в целое число 'int'. Если введенные данные не могут быть преобразованы в целое число,
# возникает исключение 'ValueError'.

# 5. 'if number % 2 == 0:': Проверяется, является ли введенное число четным '%' - оператор остатка от деления на 2.

# 6. 'print(f"{number} - четное число.")' и 'print(f"{number} - нечетное число.")': В зависимости от того,
# четное или нечетное число было введено, выводится соответствующее сообщение.

# 7. 'break': Если пользователь успешно ввел целое число и программа дошла до этой строки, она выходит из цикла 'while',
# даже если 'counter' был больше 0.

# 8. 'except ValueError:': Если возникло исключение 'ValueError' (т.е. введенные данные не могут быть
# преобразованы в целое число), программа переходит в этот блок кода.

# 9. 'print("Ошибка: Введите целое число.")': Выводится сообщение об ошибке.

# 10. 'counter += 1': Значение 'counter' увеличивается на 1. Это используется для отслеживания количества попыток
# ввода данных.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓ - Однострочный вариант с использованием 'input' и 'print'
print("Результат:", int(input("Введите целое число: ")) % 2 == 0, "- четное число.")

# Подробнее о коде:
# 1. 'print("Результат:", int(input("Введите целое число: ")) % 2 == 0, "- четное число.")': Эта строка кода выполняет
# несколько действий сразу.

#2. 'input("Введите целое число: ")': Пользователю предлагается ввести целое число, и введенное значение возвращается
# в виде строки.

#3. 'int(...)': Введенная строка преобразуется в целое число.

#4. '... % 2 == 0': Вычисляется остаток от деления на 2 полученного целого числа.
# Если остаток равен 0, это означает, что число четное.

#5. 'print("Результат:", ..., "- четное число.")': Выводится сообщение "Результат:", а затем результат проверки
# на четность. Если результат равен 'True', выводится "- четное число.", иначе "- нечетное число."

# Код в работе:
"Введите целое число: 7 Результат: False - четное число."
# В данном примере пользователь ввел число 7, которое нечетное, поэтому результат равен 'False',
# и выводится "- четное число."

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №4. ↓ - С использованием тернарного оператора и функции bool
number = int(input("Введите целое число: "))
result = True if number % 2 == 0 else False
print(f"{number} - {'четное' if result else 'нечетное'} число.")

# Подробнее о коде:
#1. 'number = int(input("Введите целое число: "))': Пользователю предлагается ввести целое число, и введенное
# значение преобразуется в целое число с помощью функции 'int()'.

#2. 'result = True if number % 2 == 0 else False': Здесь используется условное выражение (тернарный оператор).
# Если остаток от деления введенного числа 'number' на 2 равен 0, переменной 'result' присваивается значение 'True',
# иначе - 'False'.

#3. 'print(f"{number} - {'четное' if result else 'нечетное'} число.")': Выводится сообщение о том, является ли
# введенное число четным или нечетным. Это делается с использованием f-строки (форматированной строки)
# и тернарного оператора. Если 'result' равно 'True', то выводится "четное", иначе - "нечетное".




# Код в работе:
"Введите целое число: 7 7 - нечетное число."
# В данном примере пользователь ввел число 7, которое нечетное, поэтому выводится "7 - нечетное число."

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №5 - День недели

# Дано: ↓

# Напишите программу, которая по введенному номеру дня недели (понедельник – первый день недели – 1,
# вторник – второй день недели – 2) определяет выходной это или будний день.

# Решение: ↓

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓ - Используем условные операторы для определения, является ли введенный день недели выходным или будним
# днем.

try:
    day_number = int(input("Введите номер дня недели (1-7): "))

    if 1 <= day_number <= 7:
        if day_number in [6, 7]:
            print("Это выходной день.")
        else:
            print("Это будний день.")
    else:
        print("Ошибка: Введите номер дня от 1 до 7.")
except ValueError:
    print("Ошибка: Введите целое число.")
# Этот код запрашивает у пользователя ввести номер дня недели (от 1 до 7),
# а затем использует вложенные условия для проверки, является ли этот день выходным или будним днем.
# Если введенное число не является целым числом или находится вне диапазона от 1 до 7,
# программа выводит сообщение об ошибке.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓ - Запишем код кратко:
try:
    day_number = int(input("Введите номер дня недели (1-7): "))
    print("Это выходной день." if 1 <= day_number <= 7 and day_number in [6, 7] else "Это будний день.")
except ValueError:
    print("Ошибка: Введите целое число.")

# Подробнее о коде:
#1. 'try:': Этот блок кода представляет собой блок, в котором может произойти исключение (ошибка).

#2. 'day_number = int(input("Введите номер дня недели (1-7): "))': Пользователю предлагается ввести номер дня недели.
# Введенное значение преобразуется в целое число с помощью 'int()'. Если введенные данные не могут быть
# преобразованы в целое число, будет сгенерировано исключение 'ValueError'.

#3. 'print("Это выходной день." if 1 <= day_number <= 7 and day_number in [6, 7] else "Это будний день.")':
# Здесь используется тернарный оператор для определения типа дня (выходной или будний) на основе введенного номера
# дня недели. Если введенное число находится в диапазоне от 1 до 7 и является 6 или 7 (суббота или воскресенье),
# то выводится "Это выходной день.", в противном случае выводится "Это будний день."

#4. 'except ValueError:': Если возникает исключение 'ValueError' (введенные данные не могут быть преобразованы
# в целое число), программа переходит в этот блок кода.

#5. 'print("Ошибка: Введите целое число.")': Выводится сообщение об ошибке, сообщающее пользователю о том,
# что необходимо ввести целое число.

# Пример работы кода:
"Введите номер дня недели (1-7): 3 Это будний день."

# В данном примере пользователь ввел число 3, что соответствует буднему дню (понедельник - пятница),
# поэтому выводится "Это будний день."


 # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ Условный оператор ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №1.

# Дано: ↓

# Напишите программу, где я ввожу целое число n, и, если оно больше 20, поделите его на 6, иначе умножьте на 6.
# Выведите полученное число.

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓ - Тут я решил снова использовать тернарный оператор для решения задачи.
# (прям какой-то тернарный оператор - головного мозга у меня =) =) =) ).
try:
    n = int(input("Введите целое число n: "))
    result = n / 6 if n > 20 else n * 6
    print(f"Результат: {result}")
except ValueError:
    print("Ошибка: Введите целое число.")
# Попробую Вам рассказать про этот код по частям:
#1. 'try:': Этот блок кода представляет собой блок, в котором может произойти исключение (ошибка).

#2. 'n = int(input("Введите целое число n: "))': Пользователю предлагается ввести целое число 'n'.
# Введенное значение преобразуется в целое число с помощью 'int()'. Если введенные данные не могут быть
# преобразованы в целое число, будет сгенерировано исключение 'ValueError'.

#3. 'result = n / 6 if n > 20 else n * 6': Это тернарный оператор. Если введенное число 'n' больше 20,
# то переменной 'result' присваивается значение 'n / 6', иначе 'n * 6'. Тернарный оператор предоставляет
# сокращенный синтаксис для условных выражений.

#4. 'print(f"Результат: {result}")': Выводится результат операции, который хранится в переменной 'result'.
# Используется f-строка для вставки значения переменной 'result' в строку.

#5. 'except ValueError:': Если возникает исключение 'ValueError' (введенные данные не могут
# быть преобразованы в целое число), программа переходит в этот блок кода.

#6. 'print("Ошибка: Введите целое число.")': Выводится сообщение об ошибке, указывающее пользователю,
# что необходимо ввести целое число.

# Давайте посмотрим код в работе:
"Введите целое число n: 25 Результат: 4.166666666666667"

# В данном примере, так как введенное число 25 больше 20, переменной 'result' присваивается значение '25 / 6',
# и результат выводится на экран.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓ - по короче
try:
    n = int(input("Введите целое число n: "))
    print(f"Результат: {n / 6 if n > 20 else n * 6}")
except ValueError:
    print("Ошибка: Введите целое число.")
# В этом варианте тернарный оператор применяется напрямую внутри функции print(), делая код еще более компактным.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓ - "вишенка на торте"
try:
    print(f"Результат: {int(input('Введите целое число n: ')) / 6 if n > 20 else n * 6}")
except ValueError:
    print("Ошибка: Введите целое число.")
# Ну тут я просто запихал ернарного оператора прямо внутрь выражения для ввода числа, делая код еще более коротким.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №2.

# Дано: ↓

# Напишите программу, где я ввожу целое число n, и если оно является положительным, то прибавьте к нему 1;
# если отрицательным, то вычесть из него 2; если нулевым, то заменить его на 10. Выведите полученное число.

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓ - Начнем с использованием условного оператора
try:
    n = int(input("Введите целое число n: "))

    if n > 0:
        result = n + 1
    elif n < 0:
        result = n - 2
    else:
        result = 10

    print(f"Результат: {result}")
except ValueError:
    print("Ошибка: Введите целое число.")

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓ - Используем тернарный оператор
try:
    n = int(input("Введите целое число n: "))

    result = n + 1 if n > 0 else (n - 2 if n < 0 else 10)

    print(f"Результат: {result}")
except ValueError:
    print("Ошибка: Введите целое число.")
# Для более компактной записи условий.
# Если 'n > 0', то прибавляется 1; если 'n < 0', то вычитается 2; в противном случае устанавливается 10.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓ - Используем словарь
try:
    n = int(input("Введите целое число n: "))

    result_dict = {True: n + 1, False: n - 2}[n > 0] if n != 0 else 10

    print(f"Результат: {result_dict}")
except ValueError:
    print("Ошибка: Введите целое число.")
# В этом коде используется словарь для сопоставления условий. Если 'n > 0', то используется 'True' и прибавляется 1;
# если 'n < 0', то используется 'False' и вычитается 2; если n равно 0, устанавливается значение 10.

# Распишу все:

#1. 'try:': Этот блок кода представляет собой блок, в котором может произойти исключение (ошибка).

#2. 'n = int(input("Введите целое число n: "))': Пользователю предлагается ввести целое число 'n'.
# Введенное значение преобразуется в целое число с помощью 'int()'. Если введенные данные не могут быть преобразованы в
# целое число, будет сгенерировано исключение 'ValueError'.

#3. 'result_dict = {True: n + 1, False: n - 2}[n > 0] if n != 0 else 10':
# Это выражение создает словарь с двумя ключами: 'True' и 'False'. Если 'n > 0', выбирается 'True',
# и результатом выражения становится 'n + 1'. Если 'n <= 0', выбирается 'False', и результатом выражения
# становится 'n - 2'. Если 'n' равно 0, результатом будет 10.
# Это реализуется с использованием тернарного оператора и выражения словаря.

#4. 'print(f"Результат: {result_dict}")': Выводится результат операции, который хранится в переменной 'result_dict'.
# Используется f-строка для вставки значения переменной 'result_dict' в строку.

#5. 'except ValueError:': Если возникает исключение 'ValueError' (введенные данные не могут быть
# преобразованы в целое число), программа переходит в этот блок кода.

#6. 'print("Ошибка: Введите целое число.")': Выводится сообщение об ошибке, указывающее пользователю,
# что необходимо ввести целое число.

# В работе:
"Введите целое число n: 5 Результат: 6"
# В данном примере, так как введенное число 5 больше 0, результатом становится '5 + 1',
# то есть 6, и результат выводится на экран.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №4. ↓ - минимум и максимум
try:
    n = int(input("Введите целое число n: "))

    result = max(n - 2, min(n + 1, 10))

    print(f"Результат: {result}")
except ValueError:
    print("Ошибка: Введите целое число.")
# В этом коде используются функции 'max' и 'min' для определения максимального и минимального значения соответственно.
# Если 'n > 0', то 'max' вернет 'n + 1', если 'n < 0', то 'min' вернет 'n - 2', иначе max вернет 10.

# Рассмотрим данный вариант подробнее:
try:
    # Вводим целое число с клавиатуры
    n = int(input("Введите целое число n: "))

    # Используем функцию max для определения максимального значения
    # max(n - 2, ...) выбирает большее значение из n - 2 и следующего выражения
    # Если n > 0, то следующее выражение - n + 1
    # Если n <= 0, то следующее выражение - 10
    result = max(n - 2, min(n + 1, 10))

    # Выводим результат
    print(f"Результат: {result}")
except ValueError:
    # В случае ошибки преобразования введенных данных в целое число
    print("Ошибка: Введите целое число.")
#1. В блоке try, программа пытается выполнить следующие шаги:

## Считать ввод пользователя с клавиатуры как целое число 'n = int(input("Введите целое число n: "))'.
## Используется функция 'max' для выбора максимального значения между 'n - 2' и следующим выражением.
## Следующее выражение использует функцию 'min' для выбора минимального значения между 'n + 1' и 10.
## Итоговый результат присваивается переменной 'result'.
## Результат выводится на экран 'print(f"Результат: {result}")'.

#2. В блоке 'except ValueError', программа обрабатывает исключение 'ValueError',
# которое может возникнуть при попытке конвертировать введенный текст в целое число.
# В случае исключения, выводится сообщение об ошибке 'print("Ошибка: Введите целое число.")'.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №5. ↓ - лямбда-функция и map
try:
    n = int(input("Введите целое число n: "))

    result = list(map(lambda x: x(n), [lambda x: x + 1 if x > 0 else x, lambda x: x - 2 if x < 0 else 10]))[0]

    print(f"Результат: {result}")
except ValueError:
    print("Ошибка: Введите целое число.")

# Этот код использует лямбда-функции и функцию map для выполнения различных выражений в зависимости от значения 'n'.
#1. 'list(map(lambda x: x(n), [lambda x: x + 1 if x > 0 else x, lambda x: x - 2 if x < 0 else 10]))[0]':
#↑ Создается список из двух лямбда-функций: одна для случая 'n > 0', другая для случаев 'n <= 0'.
#↑ 'map' применяет каждую из этих функций к введенному значению 'n'.
#↑ 'list(...)[0]' извлекает первый элемент из списка, который содержит результат выбранной лямбда-функции.

#2. 'print(f"Результат: {result}")':
#↑ Выводит полученный результат на экран.

#3. 'except ValueError':
#↑ Обрабатывает исключение 'ValueError', которое может возникнуть при попытке конвертировать введенный
# текст в целое число. В случае исключения, выводится сообщение об ошибке.


# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №3.

# Дано: ↓

# Напишите программу, где я ввожу целые числа a и b, если их значения не равны, то присвоить каждой переменной
# сумму этих значении, а если равны, то присвоить переменным нулевые значения. Вывести новые значения переменных.

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓ - Программа сначала запрашивает у пользователя ввод значений переменных 'a' и 'b', затем
# проверяет их на равенство. В зависимости от результата присваиваются новые значения переменным,
# и эти новые значения выводятся на экран.

# Ввод целых чисел a и b
a = int(input("Введите значение переменной a: "))
b = int(input("Введите значение переменной b: "))
# Проверка на равенство
if a != b:
    # Присвоение суммы значений
    a = a + b
    b = a  # Можно также написать b = b + a
else:
    # Присвоение нулевых значений
    a = 0
    b = 0

# Вывод новых значений переменных
print("Новое значение переменной a:", a)
print("Новое значение переменной b:", b)

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓ - Этот код представляет собой блок 'try-except'
try:
    a = int(input("Введите целое число a: "))
    b = int(input("Введите целое число b: "))

    if a != b:
        a = a + b
        b = a
    else:
        a = 0
        b = 0

    print(f"Новое значение a: {a}")
    print(f"Новое значение b: {b}")
except ValueError:
    print("Ошибка: Введите целые числа.")

# Этот код делает следующее:

#1. Считывает два целых числа 'a' и 'b' с клавиатуры.
#2. Проверяет, равны ли они.
#3. Если 'a' и 'b' не равны, то каждой переменной присваивается сумма 'a' и 'b'.
#4. Если 'a' и 'b' равны, то обе переменные присваиваются нулевые значения.
#5. Выводит новые значения переменных 'a' и 'b'.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓ - Используем арифметические операторы
try:
    a = int(input("Введите целое число a: "))
    b = int(input("Введите целое число b: "))

    a, b = (a + b, a + b) if a != b else (0, 0)

    print(f"Новое значение a: {a}")
    print(f"Новое значение b: {b}")
except ValueError:
    print("Ошибка: Введите целые числа.")
# В этом варианте используется кортеж '(a + b, a + b)' внутри тернарного оператора.
# Если 'a' и 'b' не равны, оба элемента кортежа будут равны сумме 'a' и 'b', и переменным 'a' и 'b' будет присвоено
# это значение. Если 'a' и 'b' равны, то оба элемента кортежа будут равны 0,
# и переменным 'a' и 'b' будет присвоено значение 0.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №4. ↓ - Словарь
try:
    a = int(input("Введите целое число a: "))
    b = int(input("Введите целое число b: "))

    a, b = {True: (0, 0), False: (a + b, a + b)}[a == b]

    print(f"Новое значение a: {a}")
    print(f"Новое значение b: {b}")
except ValueError:
    print("Ошибка: Введите целые числа.")

# Подробнее:

#1. 'a == b' - это проверка, равны ли значения 'a' и 'b'.
# Если они равны, то это выражение возвращает 'True', иначе - 'False'.

#2. '{True: (0, 0), False: (a + b, a + b)}' - это словарь, где ключ 'True' соответствует случаю,
# когда 'a' и 'b' равны, и используется кортеж '(0, 0)'. Ключ 'False' соответствует случаю, когда 'a' и 'b' не равны,
# и используется кортеж '(a + b, a + b)'.

#3. '[a == b]' - это обращение к словарю по ключу, который является результатом проверки 'a == b'.
# Если 'a' и 'b' равны, то будет использоваться '(0, 0)', иначе - '(a + b, a + b)'.

#4. 'a, b = ...' - это распаковка значений из полученного кортежа и присваивание их переменным 'a' и 'b'.

# Таким образом, в зависимости от того, равны ли 'a' и 'b',
# переменные 'a' и 'b' обновляются соответствующими значениями.


# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №4.

# Дано: ↓

# Напишите программу, где ввожу число n, и если оно является положительным,
# то прибавьте к нему 1; в противном случае не изменять его. Выведите полученное число.

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
# Ввод числа n
n = int(input("Введите число n: "))
# Проверка на положительность
if n > 0:
    # Если n положительно, прибавляем 1
    n = n + 1
# Вывод результата
print("Полученное число:", n)

# Программа сначала запрашивает у пользователя ввод числа 'n', затем проверяет, является ли оно положительным.
# Если 'n' положительно, то к нему прибавляется 1. В конце программа выводит полученное число на экран.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓
# Ввод числа n
n = int(input("Введите число n: "))
# Прибавление 1, если число положительное
n = max(n, 0) + 1
# Вывод результата
print("Полученное число:", n)

# Этот код использует функцию 'max(n, 0)', которая возвращает большее из двух чисел 'n' и '0'.
# Если 'n' положительно, то 'max(n, 0)' вернет 'n', и прибавится 1.
# Если 'n' не положительно, то 'max(n, 0)' вернет 0, и прибавления не произойдет.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓
try:
    n = int(input("Введите число n: "))

    n = n + 1 if n > 0 else n

    print(f"Результат: {n}")
except ValueError:
    print("Ошибка: Введите число.")
# В этом коде используется тернарный оператор для проверки условия 'n > 0'.
# Если это условие выполняется (то есть 'n' является положительным), то к 'n' прибавляется 1,
# в противном случае 'n' остается неизменным. Полученное значение выводится на экран.

# - БОЛЕЕ КОРОТКИЙ ВАРИАНТ - #
try:
    n = int(input("Введите число n: "))
    print(f"Результат: {n + 1}") if n > 0 else print(f"Результат: {n}")
except ValueError:
    print("Ошибка: Введите число.")

# Рассмотрим этот вариант пошагово:
#1. эtryэ: - Это начало блока, в котором выполняется код, который может вызвать исключение (ошибку).
# Если исключение происходит внутри блока 'try', выполнение кода переходит к соответствующему блоку 'except'.

#2. 'n = int(input("Введите число n: "))' - Здесь пользователю предлагается ввести число '(input("Введите число n: "))'.
# 'input' считывает введенную строку, а 'int' преобразует ее в целое число.
# Затем полученное значение присваивается переменной 'n'.

#3. 'print(f"Результат: {n + 1}") if n > 0 else print(f"Результат: {n}")' - Это условная конструкция,
# использующая тернарный оператор. Если 'n' больше 0, то будет выведено сообщение с результатом 'n + 1',
# иначе будет выведено сообщение с результатом 'n'.

#4. 'except ValueError': - Если возникает исключение 'ValueError' (когда ввод не может быть преобразован в целое число),
# выполнение переходит к этому блоку.

#5. 'print("Ошибка: Введите число.")' - Если возникает исключение 'ValueError', выводится сообщение об ошибке,
# указывающее пользователю ввести число.

# Таким образом, этот код запрашивает у пользователя ввод числа, проверяет,
# является ли оно положительным, и выводит результат с соответствующим сообщением.
# В случае ошибки (например, если введенное значение не является числом), выводится сообщение об ошибке.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №5.

# Дано: ↓

# Напишите программу, где я ввожу целостное число a и b, и если a делиться на b,
# то программа должна вывести divisible иначе not divisible.

# *** Подсказка: Есть такой оператор %, % показывает остаток числа.
# Например, 10%4 будет равна 2, так как когда мы делим 10 на 4, остаток у нас будет 2

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
try:
    a = int(input("Введите целое число a: "))
    b = int(input("Введите целое число b: "))

    result = "divisible" if a % b == 0 else "not divisible"

    print(result)
except ValueError:
    print("Ошибка: Введите целые числа.")

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓
# Вводим целые числа a и b
a = int(input("Введите целое число a: "))
b = int(input("Введите целое число b: "))
# Проверяем, делится ли a на b без остатка
if a % b == 0:
    print("divisible")
else:
    print("not divisible")

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓
# Вводим целые числа a и b
a = int(input("Введите целое число a: "))
b = int(input("Введите целое число b: "))
# Используем тернарный оператор для вывода сообщения
print("divisible" if a % b == 0 else "not divisible")

# Ввод чисел: Сначала программа запрашивает у пользователя ввод двух целых чисел 'a' и 'b'.

# Тернарный оператор: Строка 'print("divisible" if a % b == 0 else "not divisible")' представляет собой
# тернарный оператор. Он имеет следующий формат: 'x if condition else y'. Если условие 'a % b == 0' истинно,
# то возвращается значение "divisible", иначе возвращается "not divisible".

# Вывод результата: Результат выполнения тернарного оператора выводится на экран.


# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №4. ↓
print("divisible" if int(input("Введите целое число a: ")) %
                     int(input("Введите целое число b: ")) == 0 else "not divisible")

# Подробнее:
# 'int(input("Введите целое число a: "))' - Эта часть кода запрашивает у пользователя ввод целого числа 'a'.
# 'input' считывает строку, а 'int' преобразует эту строку в целое число.

# '%' - Это оператор остатка от деления.
# В данном случае, мы используем его для проверки того, делится ли число 'a' на число 'b' нацело.
# Если остаток от деления равен 0, значит, 'a' делится на 'b' без остатка.

# 'int(input("Введите целое число b: "))' - Это аналогичная операция для ввода и
# преобразования в целое число для второго числа 'b'.

# 'print("divisible" if ... else "not divisible")' - Это тернарный оператор.
# Если условие после 'if' истинно (в данном случае, если 'a' делится на 'b'),
# то программа выводит "divisible", иначе "not divisible".

# Таким образом, в одной строке кода выполняется ввод двух чисел,
# их деление с проверкой нацело, и вывод соответствующего результата.


 # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ Условия в Python  ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
 # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ Условия if, else, elif  ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
     # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ Блоки, отступы  ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №1.

# Дано: ↓

# Из передачи “Здоровье” Аня узнала, что рекомендуется спать хотя бы A часов в сутки,
# но пересыпать тоже вредно и не стоит спать более B часов. Сейчас Аня спит H часов в сутки.
# Если режим сна Ани удовлетворяет рекомендациям передачи “Здоровье”, выведите “Это нормально”.
# Если Аня спит менее A часов, выведите “Недосып”, если же более B часов, то выведите “Пересып”.

# Получаемое число A всегда меньше либо равно B.
# На вход программе в три строки подаются переменные в следующем порядке: A, B, H.
# Обратите внимание на регистр символов: вывод должен в точности соответствовать описанному в задании,
# т. е. если программа должна вывести "Пересып", выводы программы "пересып", "ПЕРЕСЫП",
# "ПеРеСыП" и другие не будут считаться верными.

# Это первое не самое тривиальное задание на условное выражение.
# В случаях, когда разбить исполнение программы на несколько направлений, стоит внимательно обдумать все условия,
# которые нужно использовать. Особое внимание стоит уделить строгости используемых условных операторов.
# Для того, чтобы понимать, какой из них стоит использовать, внимательно прочитайте условие задания.

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
A = int(input())
B = int(input())
H = int(input())
if H < A:
    print("Недосып")
elif H > B:
    print("Пересып")
else:
    print("Это нормально")
# Подробнее:
# Вводим переменные A, B, H
A = int(input())
B = int(input())
H = int(input())
# В этих строках программа принимает на вход три целых числа.
# 'int(input())' используется для чтения ввода с клавиатуры и преобразования его в целое число.
# Проверяем условия и выводим соответствующий результат
if H < A:
    print("Недосып")
elif H > B:
    print("Пересып")
else:
    print("Это нормально")
# Затем используется условный оператор (if-elif-else), который проверяет три условия:
#1. Если H меньше A, программа выводит "Недосып".
#2. Если H больше B, программа выводит "Пересып".
#3. Если H находится в пределах от A до B включительно, программа выводит "Это нормально".

# Использование elif (сокращение от "else if") позволяет проверять следующее условие,
# только если предыдущее условие было ложным.

    # Пример использования программы:
    # Входные данные:
    # 6
    # 10
    # 8
    # Выходные данные:

    # Это нормально

# В этом примере H равно 8, что находится в пределах от A (6) до B (10), поэтому выводится "Это нормально".

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓
# Вводим переменные A, B, H
A = int(input())
B = int(input())
H = int(input())
# Формируем результат с использованием форматирования строк
result = "Недосып" if H < A else "Пересып" if H > B else "Это нормально"
# Выводим результат
print(result)

# В данном коде используются условные операторы 'if', 'elif' (else if) и 'else'.
# Программа сначала проверяет условие 'H < A'. Если это условие выполняется,
# выводится "Недосып". Затем проверяется условие 'H > B'. Если оно выполняется, выводится "Пересып".
# Если ни одно из этих условий не выполняется, значит, 'A <= H <= B', и программа выводит "Это нормально".

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓
A, B, H = map(int, input().split())
result = "Недосып" if H < A else "Пересып" if H > B else "Это нормально"
print(result)

# В этом варианте используется тернарный оператор для более компактного написания кода.
# Программа считывает значения 'A', 'B' и 'H', а затем в одной строке вычисляет и присваивает переменной 'result'
# соответствующий вывод на основе условий. Наконец, выводится значение 'result'.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №4. ↓
A, B, H = map(int, input().split())
if H < A:
    print("Недосып")
elif A <= H <= B:
    print("Это нормально")
else:
    print("Пересып")
# В этом варианте используется последовательная проверка условий с использованием операторов 'if', 'elif' и 'else'.
# Если 'H' меньше 'A', выводится "Недосып". Если 'A <= H <= B', выводится "Это нормально".
# В противном случае, когда 'H' больше 'B', выводится "Пересып".

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №5. ↓
A, B, H = map(int, input().split())

result = (
    "Недосып" if H < A else
    "Пересып" if H > B else
    "Это нормально"
)

print(result)
# Подробнее:
#1. 'A, B, H = map(int, input().split())': Здесь вводятся три целых числа 'A', 'B' и 'H' с использованием
# функции 'input()', разделяются пробелами и преобразуются в целые числа с помощью 'map(int, ...)'.

#2. 'result = ...': Здесь используется "тернарный каскад".
# Каждая строчка представляет собой тернарный оператор. Если условие перед 'if' выполняется,
# то возвращается соответствующее значение после 'if'. Если не выполняется, то проверяется следующее
# условие после 'else'. Таким образом, в зависимости от значения 'H' относительно 'A' и 'B', переменная 'result'
# получает одно из трех значений: "Недосып", "Пересып" или "Это нормально".

#3. 'print(result)': Здесь выводится значение переменной 'result'.

# Такой подход делает код более компактным, но может быть сложным для восприятия, если человек не знаком с
# таким стилем написания. Он основан на использовании тернарных операторов вместо более традиционных блоков 'if-else'.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №2.

# Дано: ↓

# Требуется определить, является ли данный год високосным.
# Напомним, что високосными годами считаются те годы, порядковый номер которых либо кратен 4,
# но при этом не кратен 100, либо кратен 400 (например, 2000-й год являлся високосным,
# а 2100-й будет не високосным годом).
# Программа должна корректно работать на числах 1900≤n≤3000.
# Выведите "Високосный" в случае, если считанный год является високосным и "Обычный" в обратном случае
# (не забывайте проверять регистр выводимых программой символов).

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
# Вводим год
year = int(input())
# Проверяем условия для високосного года
if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    print("Високосный")
else:
    print("Обычный")
# Этот код использует логические операторы для проверки условий,
# определенных для високосных годов. Если год соответствует одному из этих условий, программа выводит "Високосный",
# иначе - "Обычный".

# Пример использования программы:
    # Входные данные: 2100
    # Выходные данные: Обычный
    # Входные данные: 2000
    # Выходные данные: Високосный

# Обратите внимание, что программа также удовлетворяет условиям задачи, которые указывают,
# что она должна корректно работать на числах в диапазоне 1900 ≤ n ≤ 3000.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓
import calendar
# Вводим год
year = int(input())
# Используем calendar.isleap() для проверки високосности года
if calendar.isleap(year):
    print("Високосный")
else:
    print("Обычный")
# Этот код использует функцию 'calendar.isleap()', которая возвращает 'True',
# если год високосный, и 'False' в противном случае.

# Пример использования программы:
    # Входные данные: 2100
    # Выходные данные: Обычный
    # Входные данные: 2000
    # Выходные данные: Високосный

# Этот вариант более компактен и может сделать код более читаемым за счет использования встроенной функции.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓
try:
    year = int(input("Введите год: "))

    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        print("Високосный")
    else:
        print("Обычный")
except ValueError:
    print("Ошибка: Введите год в числовом формате.")

# В этой программе:

#1. Вводится год с использованием input().
#2. Проверяется, является ли год високосным, согласно условиям, предложенным в задаче.
#3. Выводится соответствующий результат ("Високосный" или "Обычный").
#4. Обрабатываются исключения, связанные с вводом.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №4. ↓ - как Вариант №1 - но другой
# Вводим год
year = int(input())
# Проверяем условия для високосного года
is_leap = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
# Выводим результат
print("Високосный" if is_leap else "Обычный")

# В этом коде переменной is_leap присваивается логическое значение, которое отражает, является ли год високосным.
# Затем используется тернарный оператор для вывода соответствующего результата.

# Пример использования программы:
    # Входные данные: 2100
    # Выходные данные: Обычный
    # Входные данные: 2000
    # Выходные данные: Високосный

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №5. ↓
try:
    year = int(input("Введите год: "))
    result = "Високосный" if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) else "Обычный"
    print(result)
except ValueError:
    print("Ошибка: Введите год в числовом формате.")
# В этом варианте используется тернарный оператор для укорачивания кода.
# Проверка на високосный год выполняется в одной строке, и результат сохраняется в переменной 'result',
# которая затем выводится.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №3.

# Дано: ↓

# Напишите программу, принимающую на вход целое число, которая выводит True,
# если переданное значение попадает в интервал (- 15,12]∪(14,17)∪[19,+∞)
# и False в противном случае (регистр символов имеет значение).

# Обратите внимание на разные скобки, используемые для обозначения интервалов.
# В задании используются полуоткрытые и открытые интервалы

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
try:
    num = int(input("Введите целое число: "))
    is_in_interval = (-15 < num <= 12) or (14 < num < 17) or (19 <= num)
    print(is_in_interval)
except ValueError:
    print("Ошибка: Введите целое число.")
# В этой программе:

#1. Вводится целое число с использованием 'input()'.
#2. Проверяется, принадлежит ли число указанным интервалам.
#3. Выводится результат ('True' или 'False').

# Обработка исключения 'ValueError' добавлена для предотвращения ошибок, связанных с вводом.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓
# Вводим целое число
number = int(input())
# Проверяем, входит ли число в указанный интервал
is_in_interval = (-15 < number <= 12) or (14 < number < 17) or (19 <= number)
# Выводим результат
print(is_in_interval)

# В этом коде переменной 'is_in_interval' присваивается логическое значение в зависимости от того,
# входит ли число в указанный интервал. Затем результат выводится на экран.

# Пример использования программы:
    # Входные данные: 20
    # Выходные данные: True
    # Входные данные: -20
    # Выходные данные: False

# Этот код использует операторы сравнения для проверки вхождения числа в
# указанный интервал и логические операторы для объединения условий.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №4.

# Дано: ↓

# Жители страны Малевии часто экспериментируют с планировкой комнат. Комнаты бывают треугольные,
# прямоугольные и круглые. Чтобы быстро вычислять жилплощадь, требуется написать программу,
# на вход которой подаётся тип фигуры комнаты и соответствующие параметры,
# которая бы выводила площадь получившейся комнаты. Для числа π в стране Малевии используют значение 3.14.

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
import math
# Вводим тип фигуры
figure_type = input()
# В зависимости от типа фигуры считываем соответствующие параметры и вычисляем площадь
if figure_type == "треугольник":
    a = float(input())
    b = float(input())
    c = float(input())
    # Используем полупериметр и формулу Герона для треугольника
    s = (a + b + c) / 2
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
elif figure_type == "прямоугольник":
    a = float(input())
    b = float(input())
    # Площадь прямоугольника равна произведению длин его сторон
    area = a * b
elif figure_type == "круг":
    r = float(input())
    # Площадь круга вычисляется по формуле πr^2
    area = 3.14 * r**2
# Выводим результат
print(area)

# Программа начинается с ввода типа фигуры.
# Затем, в зависимости от введенного типа, программа считывает соответствующие параметры и вычисляет площадь.
# Наконец, результат выводится на экран.

# Пример использования программы:
    # Входные данные: Прямоугольник 4 10
    # Выходные данные: 40.0
    # Входные данные: Круг 5
    # Выходные данные: 78.5
    # Входные данные: Треугольник 3 4 5
    # Выходные данные: 6.0

# Просто введите данные, как указано в задании,
# и программа рассчитает и выведет площадь комнаты для каждого вида фигуры

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓
import math
# Функция для вычисления площади треугольника по формуле Герона
def calculate_triangle_area(a, b, c):
    s = (a + b + c) / 2
    return math.sqrt(s * (s - a) * (s - b) * (s - c))
# Функция для вычисления площади прямоугольника
def calculate_rectangle_area(a, b):
    return a * b
# Функция для вычисления площади круга
def calculate_circle_area(r):
    return 3.14 * r**2
# Вводим тип фигуры
figure_type = input()
# В зависимости от типа фигуры считываем соответствующие параметры
if figure_type == "треугольник":
    a = float(input())
    b = float(input())
    c = float(input())
    area = calculate_triangle_area(a, b, c)
elif figure_type == "прямоугольник":
    a = float(input())
    b = float(input())
    area = calculate_rectangle_area(a, b)
elif figure_type == "круг":
    r = float(input())
    area = calculate_circle_area(r)
# Выводим результат
print(area)

# Разберем, что к чему

import math
# Импортируем модуль math, который предоставляет математические функции,
# в данном случае, используется для вычисления квадратного корня и значения π.

# Функция для вычисления площади треугольника по формуле Герона
def calculate_triangle_area(a, b, c):
    s = (a + b + c) / 2
    return math.sqrt(s * (s - a) * (s - b) * (s - c))
# Определяем функцию 'calculate_triangle_area', которая принимает три стороны треугольника и возвращает площадь,
# используя формулу Герона.

# Функция для вычисления площади прямоугольника
def calculate_rectangle_area(a, b):
    return a * b
# Определяем функцию 'calculate_rectangle_area', которая принимает две стороны прямоугольника и возвращает площадь,
# просто умножая их.

# Функция для вычисления площади круга
def calculate_circle_area(r):
    return 3.14 * r**2
# Определяем функцию 'calculate_circle_area', которая принимает радиус круга и возвращает площадь,
# используя формулу πr^2.

# Вводим тип фигуры
figure_type = input()
#Получаем от пользователя тип фигуры (треугольник, прямоугольник, или круг).

# В зависимости от типа фигуры считываем соответствующие параметры
if figure_type == "треугольник":
    a = float(input())
    b = float(input())
    c = float(input())
    area = calculate_triangle_area(a, b, c)
elif figure_type == "прямоугольник":
    a = float(input())
    b = float(input())
    area = calculate_rectangle_area(a, b)
elif figure_type == "круг":
    r = float(input())
    area = calculate_circle_area(r)
# В зависимости от типа фигуры, считываем соответствующие параметры (стороны треугольника,
# стороны прямоугольника или радиус круга) и вычисляем площадь, используя соответствующую функцию.

# Выводим результат
print(area)
# Выводим результат (площадь) на экран.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓
import math

# Функция для вычисления площади треугольника по формуле Герона
def calculate_triangle_area(a, b, c):
    s = (a + b + c) / 2
    return math.sqrt(s * (s - a) * (s - b) * (s - c))

# Функция для вычисления площади прямоугольника
def calculate_rectangle_area(a, b):
    return a * b

# Функция для вычисления площади круга
def calculate_circle_area(r):
    return 3.14 * r**2

# Словарь, связывающий тип фигуры с соответствующей функцией расчета площади
figure_functions = {
    "треугольник": calculate_triangle_area,
    "прямоугольник": calculate_rectangle_area,
    "круг": calculate_circle_area
}

# Вводим тип фигуры
figure_type = input()

# Проверяем, есть ли функция для выбранного типа фигуры в словаре
if figure_type in figure_functions:
    # Считываем соответствующие параметры и вычисляем площадь
    params = [float(input()) for _ in range(len(inspect.signature(figure_functions[figure_type]).parameters))]
    area = figure_functions[figure_type](*params)
    # Выводим результат
    print(area)
else:
    print("Неверный тип фигуры")
# В этом варианте используется словарь 'figure_functions', где ключами являются типы фигур,
# а значениями — соответствующие функции для расчета площади. Программа сначала проверяет,
# есть ли введенный тип фигуры в словаре, и если да, то использует соответствующую функцию для расчета площади.

# Разбор, шаг за шагом

import math
# Шаг 1: Импортируем модуль math, который содержит математические функции,
# такие как sqrt (квадратный корень) и значение pi (пи).

# Функция для вычисления площади треугольника по формуле Герона
def calculate_triangle_area(a, b, c):
    s = (a + b + c) / 2
    return math.sqrt(s * (s - a) * (s - b) * (s - c))
# Шаг 2: Определяем функцию 'calculate_triangle_area',
# которая принимает три стороны треугольника и возвращает его площадь, используя формулу Герона.

# Функция для вычисления площади прямоугольника
def calculate_rectangle_area(a, b):
    return a * b
# Шаг 3: Определяем функцию 'calculate_rectangle_area',
# которая принимает две стороны прямоугольника и возвращает его площадь, просто умножая их.

# Функция для вычисления площади круга
def calculate_circle_area(r):
    return 3.14 * r**2
# Шаг 4: Определяем функцию 'calculate_circle_area', которая принимает радиус круга и возвращает его площадь,
# используя формулу πr^2.

# Словарь, связывающий тип фигуры с соответствующей функцией расчета площади
figure_functions = {
    "треугольник": calculate_triangle_area,
    "прямоугольник": calculate_rectangle_area,
    "круг": calculate_circle_area
}
# Шаг 5: Создаем словарь 'figure_functions', который связывает типы фигур соответствующими функциями
# для расчета площади.

# Вводим тип фигуры
figure_type = input()
# Шаг 6: Получаем от пользователя тип фигуры (треугольник, прямоугольник или круг).

# Проверяем, есть ли функция для выбранного типа фигуры в словаре
if figure_type in figure_functions:
    # Считываем соответствующие параметры
    params = [float(input()) for _ in range(len(inspect.signature(figure_functions[figure_type]).parameters))]
    # Вычисляем площадь, используя соответствующую функцию и переданные параметры
    area = figure_functions[figure_type](*params)
    # Выводим результат
    print(area)
else:
    print("Неверный тип фигуры")
# Шаг 7: Проверяем, существует ли введенный тип фигуры в словаре 'figure_functions'.
# Если существует, то считываем соответствующие параметры и вычисляем площадь,
# используя соответствующую функцию. В противном случае, выводим сообщение о неверном типе фигуры.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Задание №5.

# Дано: ↓

# В институте биоинформатики по офису передвигается робот.
# Недавно студенты из группы программистов написали для него программу, по которой робот, когда заходит в комнату,
# считает количество программистов в ней и произносит его вслух: "n программистов".

# Для того, чтобы это звучало правильно, для каждого n нужно использовать верное окончание слова.

# Напишите программу, считывающую с пользовательского ввода целое число n (неотрицательное),
# выводящее это число в консоль вместе с правильным образом изменённым словом «программист»,
# для того чтобы робот мог нормально общаться с людьми, например, 1 программист, 2 программиста, 5 программистов.

# В комнате может быть очень много программистов.
# Проверьте, что ваша программа правильно обработает все случаи, как минимум до 1000 человек.

# Если ваше решение не проходит какой-то тест, это значит, что вы не рассмотрели какой-то из случаев
# входных данных (число программистов 10000≤n≤1000). Обязательно проверяйте свои решения на дополнительных значениях,
# а не только на тех, что приведены в условии задания.

# Решение:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №1. ↓
n = int(input())
# Определяем правильное окончание в зависимости от значения n
if n % 10 == 1 and n % 100 != 11:
    ending = "программист"
elif 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
    ending = "программиста"
else:
    ending = "программистов"
# Выводим результат
print(f"{n} {ending}")

# Давайте разберем данный вариант:

n = int(input())
# Шаг 1: Получаем от пользователя целое число 'n'.

if n % 10 == 1 and n % 100 != 11:
    ending = "программист"
elif 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
    ending = "программиста"
else:
    ending = "программистов"

# Шаг 2: Используем условные операторы ('if, elif, else') для определения правильного
# окончания в зависимости от значения 'n'.

    # Первое условие ('if'): Если последняя цифра 'n' равна 1, и 'n' не оканчивается на 11,
    # то используем окончание "программист".
    # Второе условие ('elif'): Если последняя цифра находится в интервале от 2 до 4, и 'n' не оканчивается
    # на 12, 13, 14, то используем окончание "программиста".
    # В остальных случаях ('else'): Используем окончание "программистов".

print(f"{n} {ending}")

# Шаг 3: Выводим результат на экран. Используем форматированную строку (f-string) для включения
# значения 'n' и правильного окончания.

# Пример использования программы:

# Входные данные: 5
# Выходные данные: 5 программистов
# Входные данные: 0
# Выходные данные: 0 программистов
# Входные данные: 1
# Выходные данные: 1 программист
# Входные данные: 2
# Выходные данные: 2 программиста

# Этот код позволяет корректно формировать фразы с правильными окончаниями в зависимости от числа программистов.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №2. ↓
n = int(input())

if n % 100 in [11, 12, 13, 14]:
    ending = "программистов"
else:
    last_digit = n % 10
    if last_digit == 1:
        ending = "программист"
    elif 2 <= last_digit <= 4:
        ending = "программиста"
    else:
        ending = "программистов"

print(f"{n} {ending}")

# Шаг 1: Получаем ввод от пользователя, предполагаем, что он введет целое число:
n = int(input())
# Здесь input() считывает строку из стандартного ввода, а int() преобразует эту строку в целое число.

# Шаг 2: Проверяем специальные случаи, когда для чисел 11-14 используется форма "программистов":
if n % 100 in [11, 12, 13, 14]:
    ending = "программистов"
# Мы используем % для получения остатка от деления на 100. Если остаток равен 11, 12, 13 или 14,
# мы выбираем окончание "программистов".

# Шаг 3: Если число не входит в предыдущую категорию, рассматриваем последнюю цифру:
else:
    last_digit = n % 10
    if last_digit == 1:
        ending = "программист"
    elif 2 <= last_digit <= 4:
        ending = "программиста"
    else:
        ending = "программистов"
# Теперь, если последняя цифра равна 1, используем форму "программист",
# если она от 2 до 4, используем "программиста", в противном случае "программистов".

# Шаг 4: Выводим результат:
print(f"{n} {ending}")
# Тут мы используем форматированную строку для объединения числа и выбранного окончания и выводим результат.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# Вариант №3. ↓
def get_programmer_ending(number):
    # Определение правильного окончания в зависимости от значения
    if number % 10 == 1 and number % 100 != 11:
        return "программист"
    elif 2 <= number % 10 <= 4 and (number % 100 < 10 or number % 100 >= 20):
        return "программиста"
    else:
        return "программистов"
# Получение ввода от пользователя
n = int(input())
# Вызов функции для определения окончания
ending = get_programmer_ending(n)
# Формирование результата и вывод на экран
result = f"{n} {ending}"
print(result)

# Теперь давайте разберем по шагам:

# Шаг 1: Определение функции для получения окончания
def get_programmer_ending(number):
    # Определение правильного окончания в зависимости от значения
    if number % 10 == 1 and number % 100 != 11:
        return "программист"
    elif 2 <= number % 10 <= 4 and (number % 100 < 10 or number % 100 >= 20):
        return "программиста"
    else:
        return "программистов"
# Мы создаем функцию 'get_programmer_ending', которая принимает число 'number' и возвращает соответствующее
# окончание в зависимости от значения.

# Шаг 2: Получение ввода от пользователя
n = int(input())
# Мы получаем от пользователя целое число 'n'.

# Шаг 3: Вызов функции для определения окончания
ending = get_programmer_ending(n)
# Мы вызываем созданную функцию для определения правильного окончания и сохраняем результат в переменной 'ending'.

# Шаг 4: Формирование результата и вывод на экран
result = f"{n} {ending}"
print(result)
# Мы используем форматированную строку для объединения числа n и правильного окончания,
# а затем выводим результат на экран.

# Я думаю, что такой вариант делает код более модульным и читаемым,
# так как основная логика окончаний вынесена в отдельную функцию.

