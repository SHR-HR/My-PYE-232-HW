# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''''   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
Дата: 04-05 ДЕКАБРЯ 2023
'''''
'''
Курс: Разработка Web-приложений на Python, с применением Фреймворка Django
Дисциплина: Основы программирования на Python
'''
'''
Урок №12 от 04.12.2023
Практическая работа №11 - Работа с датой и временем
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Выполните следующие задания:
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Задание №1.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Реализуйте программу для отображения различных форматов даты и времени.
'''
''' ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
а) текущая дата и время
б) текущий год
в) месяц года
г) номер недели в году
д) будний день недели
е) день года
г) день месяца
з) день недели
'''
''' ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
Решение:
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №1. ↓ 
'''
import datetime
# Текущая дата и время
current_datetime = datetime.datetime.now()
print(f"Текущая дата и время: {current_datetime}")
# Текущий год
current_year = current_datetime.year
print(f"Текущий год: {current_year}")
# Месяц года
current_month = current_datetime.strftime("%B")
print(f"Месяц года: {current_month}")
# Номер недели в году
week_number = current_datetime.strftime("%U")
print(f"Номер недели в году: {week_number}")
# Будний день недели
weekday = current_datetime.strftime("%A")
print(f"Будний день недели: {weekday}")
# День года
day_of_year = current_datetime.strftime("%j")
print(f"День года: {day_of_year}")
# День месяца
day_of_month = current_datetime.strftime("%d")
print(f"День месяца: {day_of_month}")
# День недели (число)
day_of_week = current_datetime.strftime("%w")
print(f"День недели: {day_of_week}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт модуля datetime
'''
import datetime
'''
Здесь мы импортируем модуль datetime, который предоставляет классы для работы с датами и временем.
'''
'''
Шаг №2. ↓ - Получение текущей даты и времени
'''
current_datetime = datetime.datetime.now()
print(f"Текущая дата и время: {current_datetime}")
'''
Создаем объект current_datetime, который содержит текущую дату и время.
Метод now() возвращает текущую дату и время по системному времени. Затем мы выводим эту информацию.
'''
'''
Шаг №3. ↓ - Получение текущего года
'''
current_year = current_datetime.year
print(f"Текущий год: {current_year}")
'''
Используем атрибут year объекта current_datetime, чтобы получить текущий год.
'''
'''
Шаг №4. ↓ - Получение месяца года
'''
current_month = current_datetime.strftime("%B")
print(f"Месяц года: {current_month}")
'''
Метод strftime позволяет форматировать дату и время.
В данном случае, с использованием формата %B, мы получаем полное название месяца.
'''
'''
Шаг №5. ↓ - Получение номера недели в году
'''
week_number = current_datetime.strftime("%U")
print(f"Номер недели в году: {week_number}")
'''
Аналогично, с использованием формата %U, мы получаем номер недели в году.
'''
'''
Шаг №6. ↓ - Получение буднего дня недели
'''
weekday = current_datetime.strftime("%A")
print(f"Будний день недели: {weekday}")
'''
Снова используем метод strftime с форматом %A, чтобы получить полное название буднего дня недели.
'''
'''
Шаг №7. ↓ - Получение дня года
'''
day_of_year = current_datetime.strftime("%j")
print(f"День года: {day_of_year}")
'''
С использованием формата %j мы получаем номер дня в году.
'''
'''
Шаг №8. ↓ - Получение дня месяца
'''
day_of_month = current_datetime.strftime("%d")
print(f"День месяца: {day_of_month}")
'''
Аналогично, используя формат %d, мы получаем номер дня в месяце.
'''
'''
Шаг №9. ↓ - Получение дня недели (число)
'''
day_of_week = current_datetime.strftime("%w")
print(f"День недели: {day_of_week}")
'''
Используем формат %w для получения числового представления дня недели (0 - воскресенье, 1 - понедельник и так далее).
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №2. ↓ 
'''
from datetime import datetime
import locale
# Устанавливаем русскую локаль
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
# a) текущая дата и время
current_datetime = datetime.now()
print("Текущая дата и время:", current_datetime)
# б) текущий год
current_year = current_datetime.year
print("Текущий год:", current_year)
# в) месяц года
current_month = current_datetime.strftime("%B")
print("Месяц года:", current_month)
# г) номер недели в году
week_number = current_datetime.strftime("%U")
print("Номер недели в году:", week_number)
# д) будний день недели
weekday = current_datetime.strftime("%A")
print("Будний день недели:", weekday)
# е) день года
day_of_year = current_datetime.strftime("%j")
print("День года:", day_of_year)
# г) день месяца
day_of_month = current_datetime.strftime("%d")
print("День месяца:", day_of_month)
# з) день недели
day_of_week = current_datetime.strftime("%A")
print("День недели:", day_of_week)
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт библиотек:
'''
from datetime import datetime
import locale
'''
В этом шаге мы импортируем две библиотеки: datetime для работы с датой и временем, и locale для управления локалью.
'''
'''
Шаг №2. ↓ - Установка русской локали:
'''
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
'''
Здесь мы устанавливаем локаль с помощью setlocale. locale.LC_TIME указывает,
что мы хотим изменить формат времени и даты, а 'ru_RU.UTF-8' устанавливает русскую локаль с кодировкой UTF-8.
'''
'''
Шаг №3. ↓ - Получение текущей даты и времени:
'''
current_datetime = datetime.now()
'''
Мы используем метод now() из модуля datetime, чтобы получить текущую дату и время.
'''
'''
Шаг №4. ↓ - Вывод текущей даты и времени:
'''
print("Текущая дата и время:", current_datetime)
'''
Здесь мы выводим текущую дату и время.
'''
'''
Шаг №5. ↓ - Остальные задачи (б - з):
'''
'''
Для каждой из оставшихся задач (текущий год, месяц года, номер недели в году и так далее)
мы используем метод strftime для форматирования данных.

Например:
'''
current_year = current_datetime.year
print("Текущий год:", current_year)
'''
Здесь strftime("%B") используется для получения полного названия месяца, и аналогично для других задач.
'''
'''
Шаг №6. ↓ - Восстановление оригинальной локали (необязательно):
'''
'''
После выполнения всех задач можно восстановить оригинальную локаль (по умолчанию) с помощью следующей строки кода
(не обязательно, но может быть полезно в некоторых случаях):
'''
locale.setlocale(locale.LC_TIME, '')
'''
И так! Что в итоге?
А в итоге этот код позволяет вам работать с датой и временем в Python,
предоставляя форматированный вывод на русском языке с использованием соответствующих локаций.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №3. ↓ 
'''
from datetime import datetime, date
# a) текущая дата и время
current_datetime = datetime.now()
print("Текущая дата и время:", current_datetime)
# б) текущий год
current_year = current_datetime.year
print("Текущий год:", current_year)
# в) месяц года
current_month = current_datetime.strftime("%B")
print("Месяц года:", current_month)
# г) номер недели в году
week_number = current_datetime.isocalendar()[1]
print("Номер недели в году:", week_number)
# д) будний день недели
weekday = current_datetime.strftime("%A")
print("Будний день недели:", weekday)
# е) день года
day_of_year = current_datetime.timetuple().tm_yday
print("День года:", day_of_year)
# г) день месяца
day_of_month = current_datetime.day
print("День месяца:", day_of_month)
# з) день недели
day_of_week = current_datetime.weekday()  # 0 - понедельник, ..., 6 - воскресенье
days_of_week = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
print("День недели:", days_of_week[day_of_week])
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт библиотек:
'''
from datetime import datetime, date
'''
Мы импортируем два класса из модуля datetime - datetime для работы с датой и временем и date для работы с датой.
'''
'''
Шаг №2. ↓ - Получение текущей даты и времени:
'''
current_datetime = datetime.now()
'''
Мы используем метод now() класса datetime, чтобы получить объект с текущей датой и временем.
'''
'''
Шаг №3. ↓ - Вывод текущей даты и времени:
'''
print("Текущая дата и время:", current_datetime)
'''
Здесь мы просто выводим текущую дату и время.
'''
'''
Шаг №4. ↓ - Получение текущего года:
'''
current_year = current_datetime.year
'''
Мы используем атрибут year объекта datetime, чтобы получить текущий год.
'''
'''
Шаг №5. ↓ - Вывод текущего года:
'''
print("Текущий год:", current_year)
'''
Просто выводим текущий год.
'''
'''
Шаг №6. ↓ - Получение месяца года:
'''
current_month = current_datetime.strftime("%B")
'''
Мы используем метод strftime для форматирования даты в полное название месяца.
'''
'''
Шаг №7. ↓ - Вывод месяца года:
'''
print("Месяц года:", current_month)
'''
Просто выводим месяц года.
'''
'''
Шаг №8. ↓ - Получение номера недели в году:
'''
week_number = current_datetime.isocalendar()[1]
'''
Мы используем метод isocalendar(), который возвращает кортеж с годом, номером недели и днем недели.
Мы затем выбираем второй элемент кортежа, содержащий номер недели.
'''
'''
Шаг №9. ↓ - Вывод номера недели в году:
'''
print("Номер недели в году:", week_number)
'''
Просто выводим номер недели в году.
'''
'''
Шаг №10. ↓ - Получение буднего дня недели:
'''
weekday = current_datetime.strftime("%A")
'''
Мы используем метод strftime для форматирования даты в полное название дня недели.
'''
'''
Шаг №11. ↓ - Вывод буднего дня недели:
'''
print("Будний день недели:", weekday)
'''
Просто выводим будний день недели.
'''
'''
Шаг №12. ↓ - Получение дня года:
'''
day_of_year = current_datetime.timetuple().tm_yday
'''
Мы используем метод timetuple() и затем атрибут tm_yday, чтобы получить день года.
'''
'''
Шаг №13. ↓ - Вывод дня года:
'''
print("День года:", day_of_year)
'''
Просто выводим день года.
'''
'''
Шаг №14. ↓ - Получение дня месяца:
'''
day_of_month = current_datetime.day
'''
Мы используем атрибут day, чтобы получить день месяца.
'''
'''
Шаг №15. ↓ - Вывод дня месяца:
'''
print("День месяца:", day_of_month)
'''
Просто выводим день месяца.
'''
'''
Шаг №16. ↓ - Получение дня недели (0 - понедельник, ..., 6 - воскресенье):
'''
day_of_week = current_datetime.weekday()
'''
Мы используем метод weekday(), который возвращает день недели в числовом формате
(0 - понедельник, ..., 6 - воскресенье).
'''
'''
Шаг №17. ↓ - Создание списка с полными названиями дней недели:
'''
days_of_week = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
'''
Создаем список days_of_week, где каждый элемент соответствует полному названию дня недели.
'''
'''
Шаг №18. ↓ - Вывод дня недели:
'''
print("День недели:", days_of_week[day_of_week])
'''
Просто выводим день недели, используя список days_of_week и индекс day_of_week.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №4. ↓ 
'''
from datetime import datetime

# Получение текущей даты и времени
current_datetime = datetime.now()

# Список с полными названиями дней недели
days_of_week = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]

# Список с полными названиями месяцев
months = [
    "Январь", "Февраль", "Март", "Апрель",
    "Май", "Июнь", "Июль", "Август",
    "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"
]
# Вывод всей информации сразу
formatted_output = (
    f"Текущая дата и время: {current_datetime}\n"
    f"Текущий год: {current_datetime.year}\n"
    f"Месяц года: {months[current_datetime.month - 1]}\n"
    f"Номер недели в году: {current_datetime.isocalendar()[1]}\n"
    f"Будний день недели: {days_of_week[current_datetime.weekday()]}\n"
    f"День года: {current_datetime.timetuple().tm_yday}\n"
    f"День месяца: {current_datetime.day}\n"
    f"День недели: {days_of_week[current_datetime.weekday()]}"
)
print(formatted_output)
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт библиотек:
'''
from datetime import datetime
'''
Мы импортируем класс datetime из модуля datetime.
Этот класс предоставляет функциональность для работы с датой и временем.
'''
'''
Шаг №2. ↓ - Получение текущей даты и времени:
'''
current_datetime = datetime.now()
'''
Мы используем метод now() класса datetime, чтобы получить объект с текущей датой и временем.
'''
'''
Шаг №3. ↓ - Создание списков с полными названиями дней недели и месяцев:
'''
days_of_week = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
months = ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"]
'''
Мы создаем два списка: days_of_week с полными названиями дней недели и months с полными названиями месяцев.
'''
'''
Шаг №4. ↓ - Форматированный вывод информации:
'''
formatted_output = (
    f"Текущая дата и время: {current_datetime}\n"
    f"Текущий год: {current_datetime.year}\n"
    f"Месяц года: {months[current_datetime.month - 1]}\n"
    f"Номер недели в году: {current_datetime.isocalendar()[1]}\n"
    f"Будний день недели: {days_of_week[current_datetime.weekday()]}\n"
    f"День года: {current_datetime.timetuple().tm_yday}\n"
    f"День месяца: {current_datetime.day}\n"
    f"День недели: {days_of_week[current_datetime.weekday()]}"
)
'''
Мы используем f-строки для форматирования строки вывода. В этой строке форматирования выводятся текущая дата и время,
текущий год, месяц года, номер недели в году, будний день недели, день года, день месяца и день недели.
'''
'''
Шаг №5. ↓ - Вывод отформатированной информации:
'''
print(formatted_output)
'''
Здесь мы просто выводим отформатированную информацию в консоль.
'''
'''
В заключение:
Вот такой вот код создает объект datetime с текущей датой и временем, использует списки с полными названиями дней
недели и месяцев для более читаемого вывода и выводит информацию о дате и времени в удобочитаемом формате.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №5. ↓ - чуть чуть по проще и меньше строчек кода
'''
from datetime import datetime
current_datetime = datetime.now()
days_of_week = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
months = ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"]
formatted_output = (
    f"Текущая дата и время: {current_datetime}\n"
    f"Текущий год: {current_datetime.year}\n"
    f"Месяц года: {months[current_datetime.month - 1]}\n"
    f"Номер недели в году: {current_datetime.isocalendar()[1]}\n"
    f"Будний день недели: {days_of_week[current_datetime.weekday()]}\n"
    f"День года: {current_datetime.timetuple().tm_yday}\n"
    f"День месяца: {current_datetime.day}\n"
    f"День недели: {days_of_week[current_datetime.weekday()]}"
)
print(formatted_output)
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Задание №2.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Выполните следующие задания:
'''
''' ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
Реализуйте программу, чтобы определить, является ли данный год високосным.
'''
''' ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
Решение:
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №1. ↓ 
'''
import calendar
def is_leap_year(year):
    return calendar.isleap(year)
# Вводим год с клавиатуры
year = int(input("Введите год: "))
# Проверяем, является ли год високосным
if is_leap_year(year):
    print(f"{year} год - високосный.")
else:
    print(f"{year} год - не високосный.")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт модуля calendar:
'''
import calendar
'''
Модуль calendar предоставляет различные функции, связанные с календарем, включая определение високосных годов.
'''
'''
Шаг №2. ↓ - Определение функции is_leap_year:
'''
def is_leap_year(year):
    return calendar.isleap(year)
'''
Функция is_leap_year принимает год в качестве аргумента и использует функцию isleap из модуля calendar для определения,
является ли год високосным. Функция возвращает True, если год високосный, и False в противном случае.
'''
'''
Шаг №3. ↓ - Ввод года с клавиатуры:
'''
year = int(input("Введите год: "))
'''
Здесь пользователю предлагается ввести год, который интересует.
input используется для ввода данных с клавиатуры, и int используется для преобразования введенного
значения в целое число.
'''
'''
Шаг №4. ↓ - Проверка на високосный год и вывод результата:
'''
if is_leap_year(year):
    print(f"{year} год - високосный.")
else:
    print(f"{year} год - не високосный.")
'''
Здесь вызывается функция is_leap_year с введенным годом, и в зависимости от результата выводится
соответствующее сообщение.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №2. ↓ 
'''
import calendar
def count_leap_years(start_year, end_year):
    leap_years = [year for year in range(start_year, end_year + 1) if calendar.isleap(year)]
    return leap_years
# Вводим интервал годов
start_year = int(input("Введите начальный год: "))
end_year = int(input("Введите конечный год: "))
# Получаем список високосных лет в заданном интервале
leap_years_list = count_leap_years(start_year, end_year)
# Выводим результат
if len(leap_years_list) > 0:
    print(f"В промежутке с {start_year} по {end_year} високосными годами являются следующие года:")
    print(leap_years_list)
    print(f"Всего високосных лет: {len(leap_years_list)}")
else:
    print(f"В промежутке с {start_year} по {end_year} годы високосных лет нет.")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт модуля calendar:
'''
import calendar
'''
Модуль calendar предоставляет функции для работы с календарем, включая определение високосных годов.
'''
'''
Шаг №2. ↓ - Определение функции count_leap_years:
'''
def count_leap_years(start_year, end_year):
    leap_years = [year for year in range(start_year, end_year + 1) if calendar.isleap(year)]
    return leap_years
'''
Эта функция принимает два аргумента, start_year и end_year, и возвращает список високосных лет в указанном диапазоне.
Список создается с использованием генератора списка и функции isleap из модуля calendar.
'''
'''
Шаг №3. ↓ - Ввод интервала годов с клавиатуры:
'''
start_year = int(input("Введите начальный год: "))
end_year = int(input("Введите конечный год: "))
'''
Здесь пользователь вводит начальный и конечный годы с клавиатуры, и введенные значения преобразуются
в целые числа с помощью int().
'''
'''
Шаг №4. ↓ - Получение списка високосных лет:
'''
leap_years_list = count_leap_years(start_year, end_year)
'''
Вызывается функция count_leap_years с введенными годами, и результат сохраняется в переменной leap_years_list.
'''
'''
Шаг №5. ↓ - Вывод результата:
'''
if len(leap_years_list) > 0:
    print(f"В промежутке с {start_year} по {end_year} високосными годами являются следующие года:")
    print(leap_years_list)
    print(f"Всего високосных лет: {len(leap_years_list)}")
else:
    print(f"В промежутке с {start_year} по {end_year} годы високосных лет нет.")
'''
Здесь проверяется длина списка високосных лет.
Если список не пустой, то выводится информация о високосных годах, иначе сообщение,
что в указанном диапазоне годов високосных лет нет.
'''
'''
Решил оставить тут пример работы кода:
'''
'''
Введите начальный год: 1568
Введите конечный год: 2023
В промежутке с 1568 по 2023 високосными годами являются следующие года:
[1568, 1572, 1576, 1580, 1584, 1588, 1592, 1596, 1600, 1604, 1608, 1612, 1616, 1620, 1624, 1628, 1632, 1636, 1640,
1644, 1648, 1652, 1656, 1660, 1664, 1668, 1672, 1676, 1680, 1684, 1688, 1692, 1696, 1704, 1708, 1712, 1716, 1720, 1724,
1728, 1732, 1736, 1740, 1744, 1748, 1752, 1756, 1760, 1764, 1768, 1772, 1776, 1780, 1784, 1788, 1792, 1796, 1804, 1808,
1812, 1816, 1820, 1824, 1828, 1832, 1836, 1840, 1844, 1848, 1852, 1856, 1860, 1864, 1868, 1872, 1876, 1880, 1884, 1888,
1892, 1896, 1904, 1908, 1912, 1916, 1920, 1924, 1928, 1932, 1936, 1940, 1944, 1948, 1952, 1956, 1960, 1964, 1968, 1972,
1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020]
Всего високосных лет: 111
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №3. ↓ 
'''
import calendar
def get_leap_years(start_year, end_year):
    try:
        start_year, end_year = int(start_year), int(end_year)
        if start_year > end_year:
            raise ValueError("Начальный год не может быть больше конечного года.")
        leap_years = [year for year in range(start_year, end_year + 1) if calendar.isleap(year)]
        return leap_years
    except ValueError as e:
        return str(e)
# Ввод интервала годов с клавиатуры
start_year = input("Введите начальный год: ")
end_year = input("Введите конечный год: ")
# Получение списка високосных лет и обработка ошибок
leap_years_list = get_leap_years(start_year, end_year)
# Вывод результата
if isinstance(leap_years_list, list):
    if leap_years_list:
        print(f"В промежутке с {start_year} по {end_year} високосными годами являются следующие года:")
        print(leap_years_list)
        print(f"Всего високосных лет: {len(leap_years_list)}")
    else:
        print(f"В промежутке с {start_year} по {end_year} годы високосных лет нет.")
else:
    print(f"Ошибка: {leap_years_list}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт модуля calendar:
'''
import calendar
'''
Эта строка кода импортирует модуль calendar, который предоставляет функции для работы с календарем,
включая определение високосных годов.
'''
'''
Шаг №2. ↓ - Определение функции get_leap_years:
'''
def get_leap_years(start_year, end_year):
    try:
        start_year, end_year = int(start_year), int(end_year)
        if start_year > end_year:
            raise ValueError("Начальный год не может быть больше конечного года.")

        leap_years = [year for year in range(start_year, end_year + 1) if calendar.isleap(year)]
        return leap_years

    except ValueError as e:
        return str(e)

'''
Эта часть кода определяет функцию get_leap_years, которая принимает два аргумента - start_year (начальный год)
и end_year (конечный год). Затем используется блок try-except для обработки ошибок.

В блоке try:

start_year и end_year преобразуются в целые числа с помощью int().
Проверяется, что начальный год не больше конечного. Если это так, генерируется исключение ValueError с сообщением 
об ошибке.

В блоке except:

Если возникает исключение ValueError, программа возвращает строку с текстом ошибки.
Если ошибок не возникает, программа создает список leap_years, содержащий високосные годы в заданном диапазоне с 
использованием генератора списка и функции isleap из модуля calendar.

Затем функция возвращает этот список.
'''
'''
Шаг №2. ↓ - Ввод интервала годов с клавиатуры:
'''
start_year = input("Введите начальный год: ")
end_year = input("Введите конечный год: ")
'''
В данной части кода пользователю предлагается ввести начальный и конечный год с клавиатуры.
Введенные значения сохраняются в переменные start_year и end_year.
'''
'''
Шаг №3. ↓ - Получение списка високосных лет и обработка ошибок:
'''
leap_years_list = get_leap_years(start_year, end_year)
'''
Здесь вызывается функция get_leap_years с введенными годами, и результат (список високосных лет или строка с ошибкой)
сохраняется в переменной leap_years_list.
'''
'''
Шаг №4. ↓ - Вывод результата:
'''
if isinstance(leap_years_list, list):
    if leap_years_list:
        print(f"В промежутке с {start_year} по {end_year} високосными годами являются следующие года:")
        print(leap_years_list)
        print(f"Всего високосных лет: {len(leap_years_list)}")
    else:
        print(f"В промежутке с {start_year} по {end_year} годы високосных лет нет.")
else:
    print(f"Ошибка: {leap_years_list}")
'''
В этой части кода проверяется тип переменной leap_years_list с помощью isinstance. Если это список,
то проверяется, не пуст ли он. В зависимости от результата выводится информация о високосных годах или
сообщение об ошибке.
'''
'''
Пример работы кода:
'''
'''
Введите начальный год: 312
Введите конечный год: 9578
В промежутке с 312 по 9578 високосными годами являются следующие года:
[312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404,
408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 504,
508, 512, 516, 520, 524, 528, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572, 576, 580, 584, 588, 592, 596, 604,
608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 680, 684, 688, 692, 696, 704,
708, 712, 716, 720, 724, 728, 732, 736, 740, 744, 748, 752, 756, 760, 764, 768, 772, 776, 780, 784, 788, 792, 796, 800,
804, 808, 812, 816, 820, 824, 828, 832, 836, 840, 844, 848, 852, 856, 860, 864, 868, 872, 876, 880, 884, 888, 892, 896,
904, 908, 912, 916, 920, 924, 928, 932, 936, 940, 944, 948, 952, 956, 960, 964, 968, 972, 976, 980, 984, 988, 992, 996,
1004, 1008, 1012, 1016, 1020, 1024, 1028, 1032, 1036, 1040, 1044, 1048, 1052, 1056, 1060, 1064, 1068, 1072, 1076, 1080,
1084, 1088, 1092, 1096, 1104, 1108, 1112, 1116, 1120, 1124, 1128, 1132, 1136, 1140, 1144, 1148, 1152, 1156, 1160, 1164,
1168, 1172, 1176, 1180, 1184, 1188, 1192, 1196, 1200, 1204, 1208, 1212, 1216, 1220, 1224, 1228, 1232, 1236, 1240, 1244,
1248, 1252, 1256, 1260, 1264, 1268, 1272, 1276, 1280, 1284, 1288, 1292, 1296, 1304, 1308, 1312, 1316, 1320, 1324, 1328,
1332, 1336, 1340, 1344, 1348, 1352, 1356, 1360, 1364, 1368, 1372, 1376, 1380, 1384, 1388, 1392, 1396, 1404, 1408, 1412,
1416, 1420, 1424, 1428, 1432, 1436, 1440, 1444, 1448, 1452, 1456, 1460, 1464, 1468, 1472, 1476, 1480, 1484, 1488, 1492,
1496, 1504, 1508, 1512, 1516, 1520, 1524, 1528, 1532, 1536, 1540, 1544, 1548, 1552, 1556, 1560, 1564, 1568, 1572, 1576,
1580, 1584, 1588, 1592, 1596, 1600, 1604, 1608, 1612, 1616, 1620, 1624, 1628, 1632, 1636, 1640, 1644, 1648, 1652, 1656,
1660, 1664, 1668, 1672, 1676, 1680, 1684, 1688, 1692, 1696, 1704, 1708, 1712, 1716, 1720, 1724, 1728, 1732, 1736, 1740,
1744, 1748, 1752, 1756, 1760, 1764, 1768, 1772, 1776, 1780, 1784, 1788, 1792, 1796, 1804, 1808, 1812, 1816, 1820, 1824,
1828, 1832, 1836, 1840, 1844, 1848, 1852, 1856, 1860, 1864, 1868, 1872, 1876, 1880, 1884, 1888, 1892, 1896, 1904, 1908,
1912, 1916, 1920, 1924, 1928, 1932, 1936, 1940, 1944, 1948, 1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988,
1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068,
2072, 2076, 2080, 2084, 2088, 2092, 2096, 2104, 2108, 2112, 2116, 2120, 2124, 2128, 2132, 2136, 2140, 2144, 2148, 2152,
2156, 2160, 2164, 2168, 2172, 2176, 2180, 2184, 2188, 2192, 2196, 2204, 2208, 2212, 2216, 2220, 2224, 2228, 2232, 2236,
2240, 2244, 2248, 2252, 2256, 2260, 2264, 2268, 2272, 2276, 2280, 2284, 2288, 2292, 2296, 2304, 2308, 2312, 2316, 2320,
2324, 2328, 2332, 2336, 2340, 2344, 2348, 2352, 2356, 2360, 2364, 2368, 2372, 2376, 2380, 2384, 2388, 2392, 2396, 2400,
2404, 2408, 2412, 2416, 2420, 2424, 2428, 2432, 2436, 2440, 2444, 2448, 2452, 2456, 2460, 2464, 2468, 2472, 2476, 2480,
2484, 2488, 2492, 2496, 2504, 2508, 2512, 2516, 2520, 2524, 2528, 2532, 2536, 2540, 2544, 2548, 2552, 2556, 2560, 2564,
2568, 2572, 2576, 2580, 2584, 2588, 2592, 2596, 2604, 2608, 2612, 2616, 2620, 2624, 2628, 2632, 2636, 2640, 2644, 2648,
2652, 2656, 2660, 2664, 2668, 2672, 2676, 2680, 2684, 2688, 2692, 2696, 2704, 2708, 2712, 2716, 2720, 2724, 2728, 2732,
2736, 2740, 2744, 2748, 2752, 2756, 2760, 2764, 2768, 2772, 2776, 2780, 2784, 2788, 2792, 2796, 2800, 2804, 2808, 2812,
2816, 2820, 2824, 2828, 2832, 2836, 2840, 2844, 2848, 2852, 2856, 2860, 2864, 2868, 2872, 2876, 2880, 2884, 2888, 2892,
2896, 2904, 2908, 2912, 2916, 2920, 2924, 2928, 2932, 2936, 2940, 2944, 2948, 2952, 2956, 2960, 2964, 2968, 2972, 2976,
2980, 2984, 2988, 2992, 2996, 3004, 3008, 3012, 3016, 3020, 3024, 3028, 3032, 3036, 3040, 3044, 3048, 3052, 3056, 3060,
3064, 3068, 3072, 3076, 3080, 3084, 3088, 3092, 3096, 3104, 3108, 3112, 3116, 3120, 3124, 3128, 3132, 3136, 3140, 3144,
3148, 3152, 3156, 3160, 3164, 3168, 3172, 3176, 3180, 3184, 3188, 3192, 3196, 3200, 3204, 3208, 3212, 3216, 3220, 3224,
3228, 3232, 3236, 3240, 3244, 3248, 3252, 3256, 3260, 3264, 3268, 3272, 3276, 3280, 3284, 3288, 3292, 3296, 3304, 3308,
3312, 3316, 3320, 3324, 3328, 3332, 3336, 3340, 3344, 3348, 3352, 3356, 3360, 3364, 3368, 3372, 3376, 3380, 3384, 3388,
3392, 3396, 3404, 3408, 3412, 3416, 3420, 3424, 3428, 3432, 3436, 3440, 3444, 3448, 3452, 3456, 3460, 3464, 3468, 3472,
3476, 3480, 3484, 3488, 3492, 3496, 3504, 3508, 3512, 3516, 3520, 3524, 3528, 3532, 3536, 3540, 3544, 3548, 3552, 3556,
3560, 3564, 3568, 3572, 3576, 3580, 3584, 3588, 3592, 3596, 3600, 3604, 3608, 3612, 3616, 3620, 3624, 3628, 3632, 3636,
3640, 3644, 3648, 3652, 3656, 3660, 3664, 3668, 3672, 3676, 3680, 3684, 3688, 3692, 3696, 3704, 3708, 3712, 3716, 3720,
3724, 3728, 3732, 3736, 3740, 3744, 3748, 3752, 3756, 3760, 3764, 3768, 3772, 3776, 3780, 3784, 3788, 3792, 3796, 3804,
3808, 3812, 3816, 3820, 3824, 3828, 3832, 3836, 3840, 3844, 3848, 3852, 3856, 3860, 3864, 3868, 3872, 3876, 3880, 3884,
3888, 3892, 3896, 3904, 3908, 3912, 3916, 3920, 3924, 3928, 3932, 3936, 3940, 3944, 3948, 3952, 3956, 3960, 3964, 3968,
3972, 3976, 3980, 3984, 3988, 3992, 3996, 4000, 4004, 4008, 4012, 4016, 4020, 4024, 4028, 4032, 4036, 4040, 4044, 4048,
4052, 4056, 4060, 4064, 4068, 4072, 4076, 4080, 4084, 4088, 4092, 4096, 4104, 4108, 4112, 4116, 4120, 4124, 4128, 4132,
4136, 4140, 4144, 4148, 4152, 4156, 4160, 4164, 4168, 4172, 4176, 4180, 4184, 4188, 4192, 4196, 4204, 4208, 4212, 4216,
4220, 4224, 4228, 4232, 4236, 4240, 4244, 4248, 4252, 4256, 4260, 4264, 4268, 4272, 4276, 4280, 4284, 4288, 4292, 4296,
4304, 4308, 4312, 4316, 4320, 4324, 4328, 4332, 4336, 4340, 4344, 4348, 4352, 4356, 4360, 4364, 4368, 4372, 4376, 4380,
4384, 4388, 4392, 4396, 4400, 4404, 4408, 4412, 4416, 4420, 4424, 4428, 4432, 4436, 4440, 4444, 4448, 4452, 4456, 4460,
4464, 4468, 4472, 4476, 4480, 4484, 4488, 4492, 4496, 4504, 4508, 4512, 4516, 4520, 4524, 4528, 4532, 4536, 4540, 4544,
4548, 4552, 4556, 4560, 4564, 4568, 4572, 4576, 4580, 4584, 4588, 4592, 4596, 4604, 4608, 4612, 4616, 4620, 4624, 4628,
4632, 4636, 4640, 4644, 4648, 4652, 4656, 4660, 4664, 4668, 4672, 4676, 4680, 4684, 4688, 4692, 4696, 4704, 4708, 4712,
4716, 4720, 4724, 4728, 4732, 4736, 4740, 4744, 4748, 4752, 4756, 4760, 4764, 4768, 4772, 4776, 4780, 4784, 4788, 4792,
4796, 4800, 4804, 4808, 4812, 4816, 4820, 4824, 4828, 4832, 4836, 4840, 4844, 4848, 4852, 4856, 4860, 4864, 4868, 4872,
4876, 4880, 4884, 4888, 4892, 4896, 4904, 4908, 4912, 4916, 4920, 4924, 4928, 4932, 4936, 4940, 4944, 4948, 4952, 4956,
4960, 4964, 4968, 4972, 4976, 4980, 4984, 4988, 4992, 4996, 5004, 5008, 5012, 5016, 5020, 5024, 5028, 5032, 5036, 5040,
5044, 5048, 5052, 5056, 5060, 5064, 5068, 5072, 5076, 5080, 5084, 5088, 5092, 5096, 5104, 5108, 5112, 5116, 5120, 5124,
5128, 5132, 5136, 5140, 5144, 5148, 5152, 5156, 5160, 5164, 5168, 5172, 5176, 5180, 5184, 5188, 5192, 5196, 5200, 5204,
5208, 5212, 5216, 5220, 5224, 5228, 5232, 5236, 5240, 5244, 5248, 5252, 5256, 5260, 5264, 5268, 5272, 5276, 5280, 5284,
5288, 5292, 5296, 5304, 5308, 5312, 5316, 5320, 5324, 5328, 5332, 5336, 5340, 5344, 5348, 5352, 5356, 5360, 5364, 5368,
5372, 5376, 5380, 5384, 5388, 5392, 5396, 5404, 5408, 5412, 5416, 5420, 5424, 5428, 5432, 5436, 5440, 5444, 5448, 5452,
5456, 5460, 5464, 5468, 5472, 5476, 5480, 5484, 5488, 5492, 5496, 5504, 5508, 5512, 5516, 5520, 5524, 5528, 5532, 5536,
5540, 5544, 5548, 5552, 5556, 5560, 5564, 5568, 5572, 5576, 5580, 5584, 5588, 5592, 5596, 5600, 5604, 5608, 5612, 5616,
5620, 5624, 5628, 5632, 5636, 5640, 5644, 5648, 5652, 5656, 5660, 5664, 5668, 5672, 5676, 5680, 5684, 5688, 5692, 5696,
5704, 5708, 5712, 5716, 5720, 5724, 5728, 5732, 5736, 5740, 5744, 5748, 5752, 5756, 5760, 5764, 5768, 5772, 5776, 5780,
5784, 5788, 5792, 5796, 5804, 5808, 5812, 5816, 5820, 5824, 5828, 5832, 5836, 5840, 5844, 5848, 5852, 5856, 5860, 5864,
5868, 5872, 5876, 5880, 5884, 5888, 5892, 5896, 5904, 5908, 5912, 5916, 5920, 5924, 5928, 5932, 5936, 5940, 5944, 5948,
5952, 5956, 5960, 5964, 5968, 5972, 5976, 5980, 5984, 5988, 5992, 5996, 6000, 6004, 6008, 6012, 6016, 6020, 6024, 6028,
6032, 6036, 6040, 6044, 6048, 6052, 6056, 6060, 6064, 6068, 6072, 6076, 6080, 6084, 6088, 6092, 6096, 6104, 6108, 6112,
6116, 6120, 6124, 6128, 6132, 6136, 6140, 6144, 6148, 6152, 6156, 6160, 6164, 6168, 6172, 6176, 6180, 6184, 6188, 6192,
6196, 6204, 6208, 6212, 6216, 6220, 6224, 6228, 6232, 6236, 6240, 6244, 6248, 6252, 6256, 6260, 6264, 6268, 6272, 6276,
6280, 6284, 6288, 6292, 6296, 6304, 6308, 6312, 6316, 6320, 6324, 6328, 6332, 6336, 6340, 6344, 6348, 6352, 6356, 6360,
6364, 6368, 6372, 6376, 6380, 6384, 6388, 6392, 6396, 6400, 6404, 6408, 6412, 6416, 6420, 6424, 6428, 6432, 6436, 6440,
6444, 6448, 6452, 6456, 6460, 6464, 6468, 6472, 6476, 6480, 6484, 6488, 6492, 6496, 6504, 6508, 6512, 6516, 6520, 6524,
6528, 6532, 6536, 6540, 6544, 6548, 6552, 6556, 6560, 6564, 6568, 6572, 6576, 6580, 6584, 6588, 6592, 6596, 6604, 6608,
6612, 6616, 6620, 6624, 6628, 6632, 6636, 6640, 6644, 6648, 6652, 6656, 6660, 6664, 6668, 6672, 6676, 6680, 6684, 6688,
6692, 6696, 6704, 6708, 6712, 6716, 6720, 6724, 6728, 6732, 6736, 6740, 6744, 6748, 6752, 6756, 6760, 6764, 6768, 6772,
6776, 6780, 6784, 6788, 6792, 6796, 6800, 6804, 6808, 6812, 6816, 6820, 6824, 6828, 6832, 6836, 6840, 6844, 6848, 6852,
6856, 6860, 6864, 6868, 6872, 6876, 6880, 6884, 6888, 6892, 6896, 6904, 6908, 6912, 6916, 6920, 6924, 6928, 6932, 6936,
6940, 6944, 6948, 6952, 6956, 6960, 6964, 6968, 6972, 6976, 6980, 6984, 6988, 6992, 6996, 7004, 7008, 7012, 7016, 7020,
7024, 7028, 7032, 7036, 7040, 7044, 7048, 7052, 7056, 7060, 7064, 7068, 7072, 7076, 7080, 7084, 7088, 7092, 7096, 7104,
7108, 7112, 7116, 7120, 7124, 7128, 7132, 7136, 7140, 7144, 7148, 7152, 7156, 7160, 7164, 7168, 7172, 7176, 7180, 7184,
7188, 7192, 7196, 7200, 7204, 7208, 7212, 7216, 7220, 7224, 7228, 7232, 7236, 7240, 7244, 7248, 7252, 7256, 7260, 7264,
7268, 7272, 7276, 7280, 7284, 7288, 7292, 7296, 7304, 7308, 7312, 7316, 7320, 7324, 7328, 7332, 7336, 7340, 7344, 7348,
7352, 7356, 7360, 7364, 7368, 7372, 7376, 7380, 7384, 7388, 7392, 7396, 7404, 7408, 7412, 7416, 7420, 7424, 7428, 7432,
7436, 7440, 7444, 7448, 7452, 7456, 7460, 7464, 7468, 7472, 7476, 7480, 7484, 7488, 7492, 7496, 7504, 7508, 7512, 7516,
7520, 7524, 7528, 7532, 7536, 7540, 7544, 7548, 7552, 7556, 7560, 7564, 7568, 7572, 7576, 7580, 7584, 7588, 7592, 7596,
7600, 7604, 7608, 7612, 7616, 7620, 7624, 7628, 7632, 7636, 7640, 7644, 7648, 7652, 7656, 7660, 7664, 7668, 7672, 7676,
7680, 7684, 7688, 7692, 7696, 7704, 7708, 7712, 7716, 7720, 7724, 7728, 7732, 7736, 7740, 7744, 7748, 7752, 7756, 7760,
7764, 7768, 7772, 7776, 7780, 7784, 7788, 7792, 7796, 7804, 7808, 7812, 7816, 7820, 7824, 7828, 7832, 7836, 7840, 7844,
7848, 7852, 7856, 7860, 7864, 7868, 7872, 7876, 7880, 7884, 7888, 7892, 7896, 7904, 7908, 7912, 7916, 7920, 7924, 7928,
7932, 7936, 7940, 7944, 7948, 7952, 7956, 7960, 7964, 7968, 7972, 7976, 7980, 7984, 7988, 7992, 7996, 8000, 8004, 8008,
8012, 8016, 8020, 8024, 8028, 8032, 8036, 8040, 8044, 8048, 8052, 8056, 8060, 8064, 8068, 8072, 8076, 8080, 8084, 8088,
8092, 8096, 8104, 8108, 8112, 8116, 8120, 8124, 8128, 8132, 8136, 8140, 8144, 8148, 8152, 8156, 8160, 8164, 8168, 8172,
8176, 8180, 8184, 8188, 8192, 8196, 8204, 8208, 8212, 8216, 8220, 8224, 8228, 8232, 8236, 8240, 8244, 8248, 8252, 8256,
8260, 8264, 8268, 8272, 8276, 8280, 8284, 8288, 8292, 8296, 8304, 8308, 8312, 8316, 8320, 8324, 8328, 8332, 8336, 8340,
8344, 8348, 8352, 8356, 8360, 8364, 8368, 8372, 8376, 8380, 8384, 8388, 8392, 8396, 8400, 8404, 8408, 8412, 8416, 8420,
8424, 8428, 8432, 8436, 8440, 8444, 8448, 8452, 8456, 8460, 8464, 8468, 8472, 8476, 8480, 8484, 8488, 8492, 8496, 8504,
8508, 8512, 8516, 8520, 8524, 8528, 8532, 8536, 8540, 8544, 8548, 8552, 8556, 8560, 8564, 8568, 8572, 8576, 8580, 8584,
8588, 8592, 8596, 8604, 8608, 8612, 8616, 8620, 8624, 8628, 8632, 8636, 8640, 8644, 8648, 8652, 8656, 8660, 8664, 8668,
8672, 8676, 8680, 8684, 8688, 8692, 8696, 8704, 8708, 8712, 8716, 8720, 8724, 8728, 8732, 8736, 8740, 8744, 8748, 8752,
8756, 8760, 8764, 8768, 8772, 8776, 8780, 8784, 8788, 8792, 8796, 8800, 8804, 8808, 8812, 8816, 8820, 8824, 8828, 8832,
8836, 8840, 8844, 8848, 8852, 8856, 8860, 8864, 8868, 8872, 8876, 8880, 8884, 8888, 8892, 8896, 8904, 8908, 8912, 8916,
8920, 8924, 8928, 8932, 8936, 8940, 8944, 8948, 8952, 8956, 8960, 8964, 8968, 8972, 8976, 8980, 8984, 8988, 8992, 8996,
9004, 9008, 9012, 9016, 9020, 9024, 9028, 9032, 9036, 9040, 9044, 9048, 9052, 9056, 9060, 9064, 9068, 9072, 9076, 9080,
9084, 9088, 9092, 9096, 9104, 9108, 9112, 9116, 9120, 9124, 9128, 9132, 9136, 9140, 9144, 9148, 9152, 9156, 9160, 9164,
9168, 9172, 9176, 9180, 9184, 9188, 9192, 9196, 9200, 9204, 9208, 9212, 9216, 9220, 9224, 9228, 9232, 9236, 9240, 9244,
9248, 9252, 9256, 9260, 9264, 9268, 9272, 9276, 9280, 9284, 9288, 9292, 9296, 9304, 9308, 9312, 9316, 9320, 9324, 9328,
9332, 9336, 9340, 9344, 9348, 9352, 9356, 9360, 9364, 9368, 9372, 9376, 9380, 9384, 9388, 9392, 9396, 9404, 9408, 9412,
9416, 9420, 9424, 9428, 9432, 9436, 9440, 9444, 9448, 9452, 9456, 9460, 9464, 9468, 9472, 9476, 9480, 9484, 9488, 9492,
9496, 9504, 9508, 9512, 9516, 9520, 9524, 9528, 9532, 9536, 9540, 9544, 9548, 9552, 9556, 9560, 9564, 9568, 9572, 9576]

Всего високосных лет: 2248
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №4. ↓ 
'''
import calendar

def get_leap_years(start_years, end_years):
    leap_years_list = []
    error_messages = []
    for start, end in zip(start_years, end_years):
        try:
            start, end = int(start), int(end)
            if start > end:
                raise ValueError(f"Начальный год ({start}) не может быть больше конечного года ({end}).")
            leap_years = [year for year in range(start, end + 1) if calendar.isleap(year)]
            leap_years_list.append(leap_years)
        except ValueError as e:
            error_messages.append(str(e))
    return leap_years_list, error_messages
def save_to_file(filename, data):
    with open(filename, 'w') as file:
        for leap_years in data:
            file.write(str(leap_years) + '\n')
# Ввод интервалов годов с клавиатуры
start_years_input = input("Введите начальные годы через запятую: ")
end_years_input = input("Введите конечные годы через запятую: ")
start_years = start_years_input.split(',')
end_years = end_years_input.split(',')
# Получение списка високосных лет и сообщений об ошибках
leap_years_list, error_messages = get_leap_years(start_years, end_years)
# Вывод результата
if leap_years_list:
    print("В следующих интервалах годов есть високосные года:")
    for start, end, leap_years in zip(start_years, end_years, leap_years_list):
        print(f"В промежутке с {start} по {end} високосными годами являются следующие года:")
        print(leap_years)
        print(f"Всего високосных лет: {len(leap_years)}")
        print('-' * 30)
    # Сохранение в файл
    filename = input("Введите имя файла для сохранения результатов (или нажмите Enter для пропуска): ")
    if filename:
        save_to_file(filename, leap_years_list)
        print(f"Результаты сохранены в файл {filename}.")
else:
    print("Ошибки:")
    for error in error_messages:
        print(error)
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Ввод интервалов годов с клавиатуры:
'''
start_years_input = input("Введите начальные годы через запятую: ")
end_years_input = input("Введите конечные годы через запятую: ")
'''
Здесь пользователь вводит начальные и конечные годы через запятую с клавиатуры.
Введенные строки сохраняются в переменные start_years_input и end_years_input.
'''
'''
Пример:

Введите начальные годы через запятую: 1999,2001,2003,2005,2007,2009,2011,2015
Введите конечные годы через запятую: 2003,2005,2011,2021,2054,2067,2100,2222
'''
'''
Шаг №2. ↓ - Разделение введенных значений на списки:
'''
start_years = start_years_input.split(',')
end_years = end_years_input.split(',')
'''
Здесь метод split(',') используется для разделения введенных строк на списки, используя запятую в качестве разделителя.
Таким образом, создаются списки start_years и end_years.
'''
'''
Пример:

start_years = ['1999', '2001', '2003', '2005', '2007', '2009', '2011', '2015']
end_years = ['2003', '2005', '2011', '2021', '2054', '2067', '2100', '2222']

'''
'''
Шаг №3. ↓ - Определение функции get_leap_years:
'''
def get_leap_years(start_years, end_years):
    leap_years_list = []
    error_messages = []

    for start, end in zip(start_years, end_years):
        try:
            start, end = int(start), int(end)
            if start > end:
                raise ValueError(f"Начальный год ({start}) не может быть больше конечного года ({end}).")

            leap_years = [year for year in range(start, end + 1) if calendar.isleap(year)]
            leap_years_list.append(leap_years)

        except ValueError as e:
            error_messages.append(str(e))

    return leap_years_list, error_messages
'''
Эта функция принимает два списка - start_years и end_years, представляющих начальные и конечные годы интервалов.
Внутри функции происходит цикл for, который итерирует по парам начальных и конечных годов. Для каждой пары:

Пытается преобразовать годы в целые числа.

Проверяет, что начальный год не больше конечного, иначе вызывает исключение ValueError.

Создает список leap_years, содержащий високосные годы в заданном интервале с использованием генератора списка 
и функции isleap из модуля calendar.

Добавляет этот список в leap_years_list.

Если возникает ошибка (ValueError), добавляет текст ошибки в список error_messages.


Функция возвращает кортеж из двух элементов: leap_years_list - список списков високосных годов для каждого интервала,
и error_messages - список сообщений об ошибках.
'''
'''
Шаг №4. ↓ - Получение списка високосных лет и сообщений об ошибках:
'''
leap_years_list, error_messages = get_leap_years(start_years, end_years)
'''
Здесь вызывается функция get_leap_years с передачей ей списков начальных и конечных годов.
Результаты сохраняются в переменных leap_years_list и error_messages.
'''
'''
Шаг №5. ↓ - Вывод результата:
'''
if leap_years_list:
    print("В следующих интервалах годов есть високосные года:")
    for start, end, leap_years in zip(start_years, end_years, leap_years_list):
        print(f"В промежутке с {start} по {end} високосными годами являются следующие года:")
        print(leap_years)
        print(f"Всего високосных лет: {len(leap_years)}")
        print('-' * 30)

    # Сохранение в файл
    filename = input("Введите имя файла для сохранения результатов (или нажмите Enter для пропуска): ")
    if filename:
        save_to_file(filename, leap_years_list)
        print(f"Результаты сохранены в файл {filename}.")
else:
    print("Ошибки:")
    for error in error_messages:
        print(error)
'''
Здесь проверяется, не пуст ли список leap_years_list. Если не пуст, программа выводит информацию о високосных 
годах для каждого интервала. Если пользователь выбирает сохранение в файл, результаты записываются в файл. 
Если список пуст, программа выводит сообщения об ошибках из error_messages.
'''
'''
Пример работы кода:
'''
'''
Введите начальные годы через запятую: 1999,2001,2003,2005,2007,2009,2011,2015
Введите конечные годы через запятую: 2003,2005,2011,2021,2054,2067,2100,2222
В следующих интервалах годов есть високосные года:
В промежутке с 1999 по 2003 високосными годами являются следующие года:
[2000]
Всего високосных лет: 1
------------------------------
В промежутке с 2001 по 2005 високосными годами являются следующие года:
[2004]
Всего високосных лет: 1
------------------------------
В промежутке с 2003 по 2011 високосными годами являются следующие года:
[2004, 2008]
Всего високосных лет: 2
------------------------------
В промежутке с 2005 по 2021 високосными годами являются следующие года:
[2008, 2012, 2016, 2020]
Всего високосных лет: 4
------------------------------
В промежутке с 2007 по 2054 високосными годами являются следующие года:
[2008, 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052]
Всего високосных лет: 12
------------------------------
В промежутке с 2009 по 2067 високосными годами являются следующие года:
[2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064]
Всего високосных лет: 14
------------------------------
В промежутке с 2011 по 2100 високосными годами являются следующие года:
[2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088,
2092, 2096]
Всего високосных лет: 22
------------------------------
В промежутке с 2015 по 2222 високосными годами являются следующие года:
[2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088, 2092,
2096, 2104, 2108, 2112, 2116, 2120, 2124, 2128, 2132, 2136, 2140, 2144, 2148, 2152, 2156, 2160, 2164, 2168, 2172, 2176, 
2180, 2184, 2188, 2192, 2196, 2204, 2208, 2212, 2216, 2220]
Всего високосных лет: 50
------------------------------
Введите имя файла для сохранения результатов (или нажмите Enter для пропуска): SAVE-VIS-Y
Результаты сохранены в файл SAVE-VIS-Y.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №5. ↓ 
'''
'''
Можно ли точно узнать, были ли в период с 1970 по 2023 год - именно в високосных годах КАТАКЛИЗМЫ и КАТАСТРОФЫ И ВОЙНЫ?
'''
'''
Ответ гугла:
Для получения точной информации о катастрофах, катастрофах и войнах в определенные годы вам нужно обратиться к
специализированным базам данных, агентствам истории, новостным источникам или другим источникам информации.
Python и его библиотеки, вроде calendar, не предоставляют таких данных напрямую.

Однако, если у вас есть доступ к API, содержащему информацию о событиях, вы можете использовать его для получения
данных о катастрофах, катастрофах и войнах в определенные годы. Например, вы можете использовать API событийных баз
данных или исторических агентств для этого.

Вам придется адаптировать функцию get_events_for_years для использования конкретного API или источника данных.
Предположим, у вас есть API, предоставляющее информацию о событиях по годам, вы можете использовать библиотеку 
requests для выполнения HTTP-запросов и обработки ответов:
'''
import requests

def get_events_for_years(years):
    events = {}

    for year in years:
        # Здесь используйте ваше API для получения данных о событиях
        api_url = f"https://disasters.liveuamap.com/ru/{year}"
        response = requests.get(api_url)

        if response.status_code == 200:
            # Предположим, что API возвращает данные в формате JSON
            events_data = response.json()
            events[year] = events_data
        else:
            events[year] = f"Ошибка при получении данных для года {year}: {response.status_code}"

    return events
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Задание №3.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Выполните следующие задания:
'''
''' ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
Реализуйте программу, для преобразования строки в дату и время.

Input: 1 января 2014 14:43
Output: 2014-07-01 14:43:00
'''
''' ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
Решение:
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №0. ↓ 
'''
from datetime import datetime
def convert_string_to_datetime(input_string):
    # Словарь для месяцев на русском языке
    month_dict = {
        'января': 1,
        'февраля': 2,
        'марта': 3,
        'апреля': 4,
        'мая': 5,
        'июня': 6,
        'июля': 7,
        'августа': 8,
        'сентября': 9,
        'октября': 10,
        'ноября': 11,
        'декабря': 12
    }
    # Разбиваем входную строку на части
    parts = input_string.split()
    # Извлекаем значения из строки
    day = int(parts[0])
    month = month_dict[parts[1]]
    year = int(parts[2])
    time_parts = parts[3].split(':')
    hour = int(time_parts[0])
    minute = int(time_parts[1])
    # Создаем объект datetime
    datetime_obj = datetime(year, month, day, hour, minute)
    return datetime_obj
# Пример использования
input_string = '1 января 2014 14:43'
output_datetime = convert_string_to_datetime(input_string)
# Форматируем дату в строку по требуемому формату
formatted_date = output_datetime.strftime('%Y-%m-%d %H:%M:%S')
print(f"Input: {input_string}")
print(f"Output: {formatted_date}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт необходимых модулей
'''
from datetime import datetime
'''
Здесь мы импортируем только класс datetime из модуля datetime.
Этот класс предоставляет функционал для работы с датой и временем в Python.
'''
'''
Шаг №2. ↓ - Определение функции convert_string_to_datetime
'''
def convert_string_to_datetime(input_string):
    # Словарь для месяцев на русском языке
    month_dict = {
        'января': 1,
        'февраля': 2,
        'марта': 3,
        'апреля': 4,
        'мая': 5,
        'июня': 6,
        'июля': 7,
        'августа': 8,
        'сентября': 9,
        'октября': 10,
        'ноября': 11,
        'декабря': 12
    }
    # Разбиваем входную строку на части
    parts = input_string.split()
    # Извлекаем значения из строки
    day = int(parts[0])
    month = month_dict[parts[1]]
    year = int(parts[2])
    time_parts = parts[3].split(':')
    hour = int(time_parts[0])
    minute = int(time_parts[1])
    # Создаем объект datetime
    datetime_obj = datetime(year, month, day, hour, minute)
    return datetime_obj
'''
Эта функция convert_string_to_datetime принимает строку в формате "1 января 2014 14:43" и возвращает объект datetime.
Для этого она использует словарь month_dict, чтобы соотнести название месяца на русском языке с его числовым значением.
Затем разбивает входную строку на части и извлекает необходимые значения (день, месяц, год, час, минута),
чтобы создать объект datetime.
'''
'''
Шаг №3. ↓ - Пример использования функции
'''
# Пример использования
input_string = '1 января 2014 14:43'
output_datetime = convert_string_to_datetime(input_string)
# Форматируем дату в строку по требуемому формату
formatted_date = output_datetime.strftime('%Y-%m-%d %H:%M:%S')
print(f"Input: {input_string}")
print(f"Output: {formatted_date}")
'''
В этом шаге создается строка input_string, представляющая входные данные.
Затем вызывается функция convert_string_to_datetime, которая преобразует строку в объект datetime. 
Далее, с использованием метода strftime, объект datetime форматируется в строку по требуемому формату и 
выводится на экран.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №0+1. ↓ 
'''
from datetime import datetime
def convert_string_to_datetime(input_string):
    month_dict = {
        'января': 1,
        'февраля': 2,
        'марта': 3,
        'апреля': 4,
        'мая': 5,
        'июня': 6,
        'июля': 7,
        'августа': 8,
        'сентября': 9,
        'октября': 10,
        'ноября': 11,
        'декабря': 12
    }
    parts = input_string.split()
    day = int(parts[0])
    month = month_dict[parts[1]]
    year = int(parts[2])
    time_parts = parts[3].split(':')
    hour = int(time_parts[0])
    minute = int(time_parts[1])
    datetime_obj = datetime(year, month, day, hour, minute)
    return datetime_obj
# Пользовательский ввод
user_input = input("Введите дату и время в формате 'день месяц год часы:минуты'(24H): ")
output_datetime = convert_string_to_datetime(user_input)
# Форматируем дату в строку по требуемому формату
formatted_date = output_datetime.strftime('%Y-%m-%d %H:%M:%S')
print(f"Input: {user_input}")
print(f"Output: {formatted_date}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт необходимых модулей
'''
from datetime import datetime
'''
Здесь мы импортируем только класс datetime из модуля datetime.
Этот класс предоставляет функционал для работы с датой и временем в Python.
'''
'''
Шаг №2. ↓ - Определение функции convert_string_to_datetime
'''
def convert_string_to_datetime(input_string):
    month_dict = {
        'января': 1,
        'февраля': 2,
        'марта': 3,
        'апреля': 4,
        'мая': 5,
        'июня': 6,
        'июля': 7,
        'августа': 8,
        'сентября': 9,
        'октября': 10,
        'ноября': 11,
        'декабря': 12
    }

    parts = input_string.split()

    day = int(parts[0])
    month = month_dict[parts[1]]
    year = int(parts[2])
    time_parts = parts[3].split(':')
    hour = int(time_parts[0])
    minute = int(time_parts[1])

    datetime_obj = datetime(year, month, day, hour, minute)

    return datetime_obj
'''
Эта функция convert_string_to_datetime принимает строку в формате "1 января 2014 14:43" и возвращает объект datetime. 
Для этого она использует словарь month_dict, чтобы соотнести название месяца на русском языке с его числовым значением. 
Затем разбивает входную строку на части и извлекает необходимые значения (день, месяц, год, час, минута), чтобы создать 
объект datetime.
'''
'''
Шаг №3. ↓ - Пример использования функции
'''
# Пользовательский ввод
user_input = input("Введите дату и время в формате '1 января 2014 14:43': ")
output_datetime = convert_string_to_datetime(user_input)

# Форматируем дату в строку по требуемому формату
formatted_date = output_datetime.strftime('%Y-%m-%d %H:%M:%S')

print(f"Input: {user_input}")
print(f"Output: {formatted_date}")
'''
Этот код предоставляет пример использования программы. 
Пользователь вводит дату и время при запуске программы, после чего программа преобразует эту строку в 
объект datetime и выводит исходную строку и отформатированную дату на экран.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №1. ↓ 
'''
from datetime import datetime
def convert_string_to_datetime(input_string):
    month_dict = {
        'января': 1, 'февраля': 2, 'марта': 3, 'апреля': 4,
        'мая': 5, 'июня': 6, 'июля': 7, 'августа': 8,
        'сентября': 9, 'октября': 10, 'ноября': 11, 'декабря': 12
    }
    parts = input_string.split()
    day, month, year = map(int, [parts[0], month_dict[parts[1]], parts[2]])
    hour, minute = map(int, parts[3].split(':'))
    datetime_obj = datetime(year, month, day, hour, minute)
    return datetime_obj
# Пользовательский ввод
user_input = input("Введите дату и время в формате 'ДЕНЬ МЕСЯЦ ГОД ЧАСЫ:МИНУТЫ'(24Н): ")
output_datetime = convert_string_to_datetime(user_input)
# Форматируем дату в строку по требуемому формату
formatted_date = output_datetime.strftime('%Y-%m-%d %H:%M:%S')
print(f"Input: {user_input}")
print(f"Output: {formatted_date}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт необходимых модулей
'''
from datetime import datetime
'''
Здесь мы импортируем только класс datetime из модуля datetime.
'''
'''
Шаг №2. ↓ - Определение функции convert_string_to_datetime
'''
def convert_string_to_datetime(input_string):
    month_dict = {
        'января': 1, 'февраля': 2, 'марта': 3, 'апреля': 4,
        'мая': 5, 'июня': 6, 'июля': 7, 'августа': 8,
        'сентября': 9, 'октября': 10, 'ноября': 11, 'декабря': 12
    }

    parts = input_string.split()

    day, month, year = map(int, [parts[0], month_dict[parts[1]], parts[2]])
    hour, minute = map(int, parts[3].split(':'))

    datetime_obj = datetime(year, month, day, hour, minute)

    return datetime_obj
'''
В этой функции мы использовали словарь month_dict, чтобы соотнести название месяца с его числовым значением.
Затем мы разбили входную строку на части и извлекли значения для дня, месяца, года, часа и минуты. 
Функция создает объект datetime с использованием этих значений и возвращает его.
'''
'''
Шаг №3. ↓ - Пример использования функции
'''
# Пользовательский ввод
user_input = input("Введите дату и время в формате '1 января 2014 14:43': ")
output_datetime = convert_string_to_datetime(user_input)

# Форматируем дату в строку по требуемому формату
formatted_date = output_datetime.strftime('%Y-%m-%d %H:%M:%S')

print(f"Input: {user_input}")
print(f"Output: {formatted_date}")
'''
Пользователь вводит дату и время при запуске программы. 
Функция convert_string_to_datetime преобразует введенную строку в объект datetime. 
Затем программа форматирует этот объект в строку, используя требуемый формат, и выводит 
исходную строку и отформатированную дату на экран.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №2. ↓ 
'''
from datetime import datetime
def convert_string_to_datetime(input_string):
    month_dict = {
        'января': 1, 'февраля': 2, 'марта': 3, 'апреля': 4,
        'мая': 5, 'июня': 6, 'июля': 7, 'августа': 8,
        'сентября': 9, 'октября': 10, 'ноября': 11, 'декабря': 12
    }
    try:
        day, month, year, time = map(str.strip, input_string.split())
        day, year = map(int, [day, year])
        month = month_dict[month]
        hour, minute = map(int, time.split(':'))

        datetime_obj = datetime(year, month, day, hour, minute)
        return datetime_obj
    except (ValueError, KeyError, IndexError):
        print("Ошибка в формате ввода. Пожалуйста, используйте формат '1 января 2014 14:43'.")
        return None
# Пользовательский ввод
user_input = input("Введите дату и время в формате '1 января 2014 14:43': ")
# Пробуем преобразовать строку в объект datetime
output_datetime = convert_string_to_datetime(user_input)
if output_datetime:
    # Форматируем дату в строку по требуемому формату
    formatted_date = output_datetime.strftime('%Y-%m-%d %H:%M:%S')
    print(f"Input: {user_input}")
    print(f"Output: {formatted_date}")
from datetime import datetime
def convert_string_to_datetime(input_string):
    month_dict = {
        'января': 1, 'февраля': 2, 'марта': 3, 'апреля': 4,
        'мая': 5, 'июня': 6, 'июля': 7, 'августа': 8,
        'сентября': 9, 'октября': 10, 'ноября': 11, 'декабря': 12
    }
    try:
        day, month, year, time = map(str.strip, input_string.split())
        day, year = map(int, [day, year])
        month = month_dict[month]
        hour, minute = map(int, time.split(':'))
        datetime_obj = datetime(year, month, day, hour, minute)
        return datetime_obj
    except (ValueError, KeyError, IndexError):
        print("Ошибка в формате ввода. Пожалуйста, используйте формат '1 января 2014 14:43'.")
        return None
# Пользовательский ввод
user_input = input("Введите дату и время в формате '1 января 2014 14:43': ")
# Пробуем преобразовать строку в объект datetime
output_datetime = convert_string_to_datetime(user_input)
if output_datetime:
    # Форматируем дату в строку по требуемому формату
    formatted_date = output_datetime.strftime('%Y-%m-%d %H:%M:%S')
    print(f"Input: {user_input}")
    print(f"Output: {formatted_date}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт необходимых модулей
'''
from datetime import datetime
'''
Здесь мы импортируем класс datetime из модуля datetime.
'''
'''
Шаг №2. ↓ - Определение функции convert_string_to_datetime
'''
def convert_string_to_datetime(input_string):
    month_dict = {
        'января': 1, 'февраля': 2, 'марта': 3, 'апреля': 4,
        'мая': 5, 'июня': 6, 'июля': 7, 'августа': 8,
        'сентября': 9, 'октября': 10, 'ноября': 11, 'декабря': 12
    }
    try:
        # Разбиваем входную строку на части
        day, month, year, time = map(str.strip, input_string.split())
        # Преобразуем день и год в целые числа
        day, year = map(int, [day, year])
        # Находим месяц в словаре
        month = month_dict[month]
        # Разбиваем строку времени на час и минуты
        hour, minute = map(int, time.split(':'))
        # Создаем объект datetime
        datetime_obj = datetime(year, month, day, hour, minute)
        return datetime_obj
    except (ValueError, KeyError, IndexError):
        # Обрабатываем возможные ошибки ввода
        print("Ошибка в формате ввода. Пожалуйста, используйте формат '1 января 2014 14:43'.")
        return None
'''
Эта функция пытается преобразовать входную строку в объект datetime. Она использует блок try-except,
чтобы обработать возможные ошибки ввода (например, если пользователь ввел некорректные данные).
'''
'''
Шаг №3. ↓ - Пример использования функции
'''
# Пользовательский ввод
user_input = input("Введите дату и время в формате '1 января 2014 14:43': ")
# Пробуем преобразовать строку в объект datetime
output_datetime = convert_string_to_datetime(user_input)
if output_datetime:
    # Форматируем дату в строку по требуемому формату
    formatted_date = output_datetime.strftime('%Y-%m-%d %H:%M:%S')
    print(f"Input: {user_input}")
    print(f"Output: {formatted_date}")
'''
Здесь пользователь вводит дату и время при запуске программы. Функция convert_string_to_datetime пробует
преобразовать введенную строку в объект datetime. Если это успешно, программа форматирует этот объект в строку,
используя требуемый формат, и выводит исходную строку и отформатированную дату на экран. Если ввод был некорректен,
программа сообщает об ошибке.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Задание №4.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Выполните следующие задания:
'''
''' ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
Напишите программу на Python, чтобы узнать текущее время в Python.
Format: 13: 19: 49.078205
'''
''' ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
Решение:
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №1. ↓ 
'''
from datetime import datetime
current_time = datetime.now().strftime('%H:%M:%S.%f')[:-3]
print(current_time)
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт модуля datetime:
'''
from datetime import datetime
'''
Здесь мы импортируем модуль datetime, который предоставляет функциональность для работы с датами и временем в Python.
'''
'''
Шаг №2. ↓ - Получение текущего времени:
'''
current_time = datetime.now()
'''
Мы используем метод now() из модуля datetime, чтобы получить объект datetime, представляющий текущую дату и время.
'''
'''
Шаг №3. ↓ - Форматирование времени в строку:
'''
current_time_string = current_time.strftime('%H:%M:%S.%f')[:-3]
'''
Метод strftime (string format time) используется для форматирования объекта datetime в строку с заданным форматом.
В данном случае, %H:%M:%S.%f означает часы:минуты:секунды.микросекунды. 
Используем [:-3], чтобы удалить последние три символа, представляющих микросекунды.
'''
'''
Шаг №4. ↓ - Вывод результата:
'''
print(current_time_string)
'''
Здесь мы просто выводим отформатированную строку времени.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №2. ↓ 
'''
import arrow

current_time = arrow.now().format('HH:mm:ss.SSSSSS')
print(current_time)

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Установка библиотеки arrow:
'''
pip install arrow
'''
Убедитесь, что у вас установлена библиотека arrow. 
Если ее нет, вы можете установить ее с помощью следующей команды в терминале (командной строке):
'''
'''
Шаг №2. ↓ - Использование библиотеки arrow в коде:
'''
import arrow

current_time = arrow.now().format('HH:mm:ss.SSSSSS')
print(current_time)
'''
arrow.now() создает объект arrow для текущего момента времени.
format('HH:mm:ss.SSSSSS') используется для форматирования времени в строку с нужным форматом. Здесь:
'HH' представляет часы в формате 24 часа.
'mm' представляет минуты.
'ss' представляет секунды.
'SSSSSS' представляет микросекунды (6 знаков после запятой).
'''
'''
Шаг №3. ↓ - Вывод времени:
'''
print(current_time) # выводит отформатированное текущее время.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант №3. ↓ 
'''
import time
current_time = time.strftime('%H:%M:%S', time.localtime()) + f'.{str(time.time()).split(".")[1][:6]}'
print(current_time)
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт модуля time:
'''
import time
'''
Эта строка импортирует модуль time, который предоставляет функционал для работы со временем.
'''
'''
Шаг №2. ↓ - Получение текущего локального времени в формате HH:MM:SS:
'''
current_time_part = time.strftime('%H:%M:%S', time.localtime())
'''
time.localtime() возвращает структуру времени для текущего момента времени в локальной временной зоне.
time.strftime('%H:%M:%S', ...) форматирует эту структуру времени в строку в формате "часы:минуты:секунды".
Результат записывается в переменную current_time_part.
'''
'''
Шаг №3. ↓ - Получение текущего времени в секундах с момента эпохи:
'''
current_time_seconds = time.time()
'''
time.time() возвращает текущее время в секундах с начала эпохи (обычно 1970 года).
Результат записывается в переменную current_time_seconds.
'''
'''
Шаг №4. ↓ - Получение микросекунд из времени в виде строки:
'''
microseconds_str = str(current_time_seconds).split(".")[1][:6]
'''
str(current_time_seconds) преобразует секунды в строку.
split(".")[1] разбивает строку по точке и выбирает часть после точки, представляющую микросекунды.
[:6] берет первые шесть символов, что представляет микросекунды.
'''
'''
Шаг №5. ↓ - Сбор строки времени, включая микросекунды:
'''
current_time = current_time_part + f'.{microseconds_str}'
'''
Используется форматированная строка (f-string) для объединения строки времени без микросекунд с микросекундами.
'''
'''
Шаг №6. ↓ - Вывод строки времени:
'''
print(current_time)
'''
Здесь мы выводим итоговую строку времени, которая содержит текущее локальное время
в формате HH:MM:SS.ffffff (микросекунды).
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Работа с датой и временем
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Выполните следующие задания:
'''
''' ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
Задание №1
Реализуйте программу, чтобы получить последний день указанного года и месяца.

Задание №2
Реализуйте программу, чтобы узнать количество дней в данном месяце и году.

Задание №3
Реализуйте программу, для подсчета числа понедельника 1-го числа месяца с 2015 по 2016 год.

Задание №4
Реализуйте программу, для печати строки пять раз, задержка три секунды.

Задание №5
Реализуйте программу, чтобы получить даты за 30 дней до и после текущей даты
'''
''' ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
Решение:
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Задание №1 ↓ - Реализуйте программу, чтобы получить последний день указанного года и месяца.
'''
from datetime import datetime, timedelta
def last_day_of_month(year, month):
    next_month = datetime(year, month, 1) + timedelta(days=35)
    return (next_month - timedelta(days=next_month.day)).day
# Пример использования
month_input = 12
year_input = 2023
last_day = last_day_of_month(year_input, month_input)
print(f"Последний день {month_input}.{year_input} года: {last_day}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт необходимых модулей
'''
from datetime import datetime, timedelta
'''
Здесь мы импортируем два класса из модуля datetime - datetime и timedelta.
datetime используется для работы с датой и временем, а timedelta для работы с интервалами времени.
'''
'''
Шаг №2. ↓ - Определение функции last_day_of_month
'''
def last_day_of_month(year, month):
    next_month = datetime(year, month, 1) + timedelta(days=35)
    return (next_month - timedelta(days=next_month.day)).day
'''
Эта функция last_day_of_month принимает год и месяц в качестве аргументов 
и возвращает последний день указанного месяца.

next_month: создается объект datetime, представляющий первый день следующего месяца.
(next_month - timedelta(days=next_month.day)).day: отнимаем от следующего месяца количество дней, 
равное дню этого месяца, чтобы вернуться к последнему дню текущего месяца. Возвращается день этого последнего дня.
'''
'''
Шаг №3. ↓ - Пример использования функции
'''
# Пример использования
month_input = 12
year_input = 2023
last_day = last_day_of_month(year_input, month_input)
print(f"Последний день {month_input}.{year_input} года: {last_day}")
'''
В этом шаге мы используем функцию last_day_of_month. Задаем значения month_input (декабрь) и year_input (2023) 
и вызываем функцию, чтобы получить последний день указанного месяца. 
Затем выводим результат с использованием функции print.
'''

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Задание №2 ↓ - Реализуйте программу, чтобы узнать количество дней в данном месяце и году.
'''
import calendar
def days_in_month(year, month):
    return calendar.monthrange(year, month)[1]
# Пример использования
year_input = 2023
month_input = 12
num_days = days_in_month(year_input, month_input)
print(f"Количество дней в {calendar.month_name[month_input]}, {year_input} году: {num_days}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт модуля calendar:
'''
import calendar
'''
Здесь мы импортируем модуль calendar, встроенный модуль Python, предоставляющий функции для работы с календарем.
'''
'''
Шаг №2. ↓ - Определение функции days_in_month:
'''
def days_in_month(year, month):
    return calendar.monthrange(year, month)[1]
'''
Эта функция принимает два аргумента: year (год) и month (месяц).
calendar.monthrange(year, month) возвращает кортеж, содержащий первый день недели и количество дней в указанном месяце.
[1] извлекает второй элемент из этого кортежа, то есть количество дней в месяце.
Функция возвращает это количество дней.
'''
'''
Шаг №3. ↓ - Пример использования функции:
'''
year_input = 2023
month_input = 12
num_days = days_in_month(year_input, month_input)
'''
Задаем значения переменных year_input и month_input.
Вызываем функцию days_in_month с этими значениями.
Результат (количество дней в месяце) сохраняется в переменной num_days.
'''
'''
Шаг №4. ↓ - Вывод результата:
'''
print(f"Количество дней в {calendar.month_name[month_input]}, {year_input} году: {num_days}")
'''
Здесь мы используем print для вывода строки.
Строка форматирования (f"...") вставляет значения переменных в строку.
calendar.month_name[month_input] возвращает название месяца по его номеру.
Выводится сообщение о количестве дней в указанном месяце и году.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Задание №3 ↓ - Реализуйте программу, для подсчета числа понедельника 1-го числа месяца с 2015 по 2016 год.
'''
from datetime import datetime, timedelta
def count_first_of_month_mondays(start_year, end_year):
    count = 0
    current_date = datetime(start_year, 1, 1)
    while current_date.year <= end_year:
        if current_date.weekday() == 0:  # Понедельник
            count += 1
        current_date += timedelta(days=1)

    return count
# Пример использования
start_year_input = 2015
end_year_input = 2016
result = count_first_of_month_mondays(start_year_input, end_year_input)
print(f"Число понедельников на 1-е число месяца с {start_year_input} по {end_year_input} год: {result}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт необходимых модулей
'''
from datetime import datetime, timedelta
'''
В этом шаге мы импортируем два класса из модуля datetime - datetime и timedelta.
Класс datetime используется для работы с датой и временем, а timedelta для работы с интервалами времени.
'''
'''
Шаг №2. ↓ - Определение функции count_first_of_month_mondays
'''
def count_first_of_month_mondays(start_year, end_year):
    count = 0
    current_date = datetime(start_year, 1, 1)
    while current_date.year <= end_year:
        if current_date.weekday() == 0:  # Понедельник
            count += 1
        current_date += timedelta(days=1)

    return count
'''
Эта функция count_first_of_month_mondays считает количество понедельников, которые выпадают на 1-е число месяца в
указанном диапазоне лет.

count: переменная, в которой хранится количество понедельников.
current_date: объект datetime, представляющий текущую дату, инициализируется 1 января указанного года.
Цикл while выполняется, пока год текущей даты меньше или равен конечному году.
Если current_date.weekday() == 0, то это означает, что текущая дата - понедельник, и увеличиваем счетчик count.
Затем увеличиваем current_date на один день с помощью timedelta(days=1).
'''
'''
Шаг №3. ↓ - Пример использования функции
'''
# Пример использования
start_year_input = 2015
end_year_input = 2016
result = count_first_of_month_mondays(start_year_input, end_year_input)
print(f"Число понедельников на 1-е число месяца с {start_year_input} по {end_year_input} год: {result}")
'''
В этом шаге мы создаем пример использования функции count_first_of_month_mondays.
Задаем начальный и конечный год (2015 и 2016 соответственно) и вызываем функцию. 
Затем выводим результат - количество понедельников на 1-е число месяца в указанном диапазоне лет.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Задание №4 ↓ - Печать строки пять раз с задержкой в три секунды.
'''
import time
def print_with_delay(message, repetitions, delay_seconds):
    for _ in range(repetitions):
        print(message)
        time.sleep(delay_seconds)
# Пример использования
message_input = "Алтынбек, здравствуйте!"
repetitions_input = 5
delay_seconds_input = 3
print_with_delay(message_input, repetitions_input, delay_seconds_input)
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт необходимых модулей
'''
import time
'''
В этом шаге мы импортируем модуль time, который предоставляет функционал для работы со временем, включая функцию sleep,
которая позволяет задерживать выполнение программы на определенное количество секунд.
'''
'''
Шаг №2. ↓ - Определение функции print_with_delay
'''
def print_with_delay(message, repetitions, delay_seconds):
    for _ in range(repetitions):
        print(message)
        time.sleep(delay_seconds)
'''
Эта функция print_with_delay принимает три параметра:

message: строку для вывода.
repetitions: количество повторений вывода строки.
delay_seconds: время задержки между повторениями в секундах.
Затем функция использует цикл for для повторения вывода строки указанное количество раз с 
задержкой между каждым повторением.
'''
'''
Шаг №3. ↓ - Пример использования функции
'''
# Пример использования
message_input = "Алтынбек, здравствуйте!"
repetitions_input = 5
delay_seconds_input = 3
print_with_delay(message_input, repetitions_input, delay_seconds_input)
'''
В этом шаге мы создаем пример использования функции print_with_delay.
Задаем строку для вывода, количество повторений (5) и время задержки между повторениями (3 секунды).
Затем вызываем функцию, которая выводит указанную строку 5 раз с задержкой в 3 секунды между повторениями.
'''




# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Задание №5 ↓ - Получение дат за 30 дней до и после текущей даты.
'''
from datetime import datetime, timedelta

def get_dates_30_days_around_current():
    current_date = datetime.now()
    past_date = current_date - timedelta(days=30)
    future_date = current_date + timedelta(days=30)
    return past_date, current_date, future_date

# Пример использования
past, current, future = get_dates_30_days_around_current()
print(f"Дата 30 дней назад: {past}")
print(f"Текущая дата: {current}")
print(f"Дата через 30 дней: {future}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт необходимых модулей
'''
from datetime import datetime, timedelta
'''
В этом шаге мы импортируем два класса из модуля datetime - datetime и timedelta. Класс datetime используется для 
работы с датой и временем, а timedelta для работы с интервалами времени.
'''
'''
Шаг №2. ↓ - Определение функции
'''
'''
get_dates_30_days_around_current
'''
def get_dates_30_days_around_current():
    current_date = datetime.now()
    past_date = current_date - timedelta(days=30)
    future_date = current_date + timedelta(days=30)
    return past_date, current_date, future_date
'''
Эта функция get_dates_30_days_around_current создает три объекта datetime:

current_date: текущая дата и время.
past_date: текущая дата минус 30 дней.
future_date: текущая дата плюс 30 дней.
'''
'''
Шаг №3. ↓ - Пример использования функции
'''
# Пример использования
past, current, future = get_dates_30_days_around_current()
print(f"Дата 30 дней назад: {past}")
print(f"Текущая дата: {current}")
print(f"Дата через 30 дней: {future}")
'''
В этом шаге мы вызываем функцию get_dates_30_days_around_current, 
получаем результат (три даты) и выводим этот результат с использованием функции print. 
В результате выполнения кода, вы увидите три строки с датами - текущей, 30 дней назад и через 30 дней от текущей даты.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Работа с датой и временем - Задание №1,2,3,4,5 - ВСЕ ВМЕСТЕ
'''
from datetime import datetime, timedelta, date
import calendar
import time
def last_day_of_month(year, month):
    next_month = datetime(year, month, 1) + timedelta(days=35)
    return (next_month - timedelta(days=next_month.day)).day
def days_in_month(year, month):
    return calendar.monthrange(year, month)[1]
def count_first_of_month_mondays(start_year, end_year):
    count = 0
    current_date = datetime(start_year, 1, 1)
    while current_date.year <= end_year:
        if current_date.weekday() == 0:  # Понедельник
            count += 1
        current_date += timedelta(days=1)
    return count
def print_with_delay(message, repetitions, delay_seconds):
    for _ in range(repetitions):
        print(message)
        time.sleep(delay_seconds)
def get_dates_30_days_around_current():
    current_date = datetime.now()
    past_date = current_date - timedelta(days=30)
    future_date = current_date + timedelta(days=30)
    return past_date, current_date, future_date
# Пример использования
year_input = 2023
month_input = 12
last_day = last_day_of_month(year_input, month_input)
print(f"Последний день {month_input}.{year_input} года: {last_day}")
year_input = 2023
month_input = 5
num_days = days_in_month(year_input, month_input)
print(f"Количество дней в {calendar.month_name[month_input]}, {year_input} году: {num_days}")
start_year_input = 2015
end_year_input = 2016
result = count_first_of_month_mondays(start_year_input, end_year_input)
print(f"Число понедельников на 1-е число месяца с {start_year_input} по {end_year_input} год: {result}")
message_input = "Алтынбек, здравствуйте!!!"
repetitions_input = 5
delay_seconds_input = 3
print_with_delay(message_input, repetitions_input, delay_seconds_input)
past, current, future = get_dates_30_days_around_current()
print(f"Дата 30 дней назад: {past}")
print(f"Текущая дата: {current}")
print(f"Дата через 30 дней: {future}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Шаг №1. ↓ - Импорт необходимых модулей
'''
from datetime import datetime, timedelta, date
import calendar
import time
'''
В этом шаге мы импортируем несколько модулей Python, которые нам понадобятся для работы с датой и временем 
(datetime, timedelta, date, calendar), а также для работы с временными задержками (time).
'''
'''
Шаг №2. ↓ - Определение функции для получения последнего дня месяца
'''
def last_day_of_month(year, month):
    next_month = datetime(year, month, 1) + timedelta(days=35)
    return (next_month - timedelta(days=next_month.day)).day
'''
Здесь мы создаем функцию last_day_of_month, которая принимает год и месяц, затем использует datetime и 
timedelta для определения последнего дня месяца.
'''
'''
Шаг №3. ↓ - Определение функции для получения количества дней в месяце
'''
def days_in_month(year, month):
    return calendar.monthrange(year, month)[1]
'''
Эта функция days_in_month использует модуль calendar для определения количества дней в указанном месяце и году.
'''
'''
Шаг №4. ↓ - Определение функции для подсчета понедельников на 1-е число месяца
'''
def count_first_of_month_mondays(start_year, end_year):
    count = 0
    current_date = datetime(start_year, 1, 1)

    while current_date.year <= end_year:
        if current_date.weekday() == 0:  # Понедельник
            count += 1
        current_date += timedelta(days=1)

    return count
'''
Эта функция count_first_of_month_mondays считает количество понедельников, выпадающих на 1-е
число месяца в указанном диапазоне лет.
'''
'''
Шаг №5. ↓ - Определение функции для печати строки с задержкой
'''
def print_with_delay(message, repetitions, delay_seconds):
    for _ in range(repetitions):
        print(message)
        time.sleep(delay_seconds)
'''
Здесь мы создаем функцию print_with_delay, которая печатает 
заданное сообщение заданное количество раз с указанной задержкой между печатями.
'''
'''
Шаг №6. ↓ - Определение функции для получения дат за 30 дней до и после текущей даты
'''
def get_dates_30_days_around_current():
    current_date = datetime.now()
    past_date = current_date - timedelta(days=30)
    future_date = current_date + timedelta(days=30)
    return past_date, current_date, future_date
'''
Эта функция get_dates_30_days_around_current возвращает три даты: 30 дней назад от текущей даты,
текущую дату и дату через 30 дней.
'''
'''
Шаг №7. ↓ - Примеры использования функций
'''
# Примеры использования функций
year_input = 2023
month_input = 12
last_day = last_day_of_month(year_input, month_input)
print(f"Последний день {month_input}.{year_input} года: {last_day}")

year_input = 2023
month_input = 5
num_days = days_in_month(year_input, month_input)
print(f"Количество дней в {calendar.month_name[month_input]}, {year_input} году: {num_days}")

start_year_input = 2015
end_year_input = 2016
result = count_first_of_month_mondays(start_year_input, end_year_input)
print(f"Число понедельников на 1-е число месяца с {start_year_input} по {end_year_input} год: {result}")

message_input = "Алтынбек, здравствуйте!"
repetitions_input = 5
delay_seconds_input = 3
print_with_delay(message_input, repetitions_input, delay_seconds_input)

past, current, future = get_dates_30_days_around_current()
print(f"Дата 30 дней назад: {past}")
print(f"Текущая дата: {current}")
print(f"Дата через 30 дней: {future}")











